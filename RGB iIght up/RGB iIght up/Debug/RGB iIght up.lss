
RGB iIght up.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000262  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000020e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000262  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000294  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000002d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008ba  00000000  00000000  00000304  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000070c  00000000  00000000  00000bbe  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000033c  00000000  00000000  000012ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000004c  00000000  00000000  00001608  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003fd  00000000  00000000  00001654  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001e9  00000000  00000000  00001a51  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001c3a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <main>
  78:	0c 94 05 01 	jmp	0x20a	; 0x20a <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <setPin>:
#include <util/delay.h>
#include <stdlib.h>


void setPin(char port,int pin,int state){  //port=A,B,C,D. pin 0-7. state 0 or 1.
	switch(port){
  80:	83 34       	cpi	r24, 0x43	; 67
  82:	f9 f0       	breq	.+62     	; 0xc2 <setPin+0x42>
  84:	84 34       	cpi	r24, 0x44	; 68
  86:	b9 f1       	breq	.+110    	; 0xf6 <setPin+0x76>
  88:	82 34       	cpi	r24, 0x42	; 66
  8a:	09 f0       	breq	.+2      	; 0x8e <setPin+0xe>
  8c:	4e c0       	rjmp	.+156    	; 0x12a <setPin+0xaa>
		case 'B':
		if(state==1)
  8e:	41 30       	cpi	r20, 0x01	; 1
  90:	51 05       	cpc	r21, r1
  92:	59 f4       	brne	.+22     	; 0xaa <setPin+0x2a>
		DDRB |= (1<<pin);
  94:	24 b1       	in	r18, 0x04	; 4
  96:	81 e0       	ldi	r24, 0x01	; 1
  98:	90 e0       	ldi	r25, 0x00	; 0
  9a:	02 c0       	rjmp	.+4      	; 0xa0 <setPin+0x20>
  9c:	88 0f       	add	r24, r24
  9e:	99 1f       	adc	r25, r25
  a0:	6a 95       	dec	r22
  a2:	e2 f7       	brpl	.-8      	; 0x9c <setPin+0x1c>
  a4:	82 2b       	or	r24, r18
  a6:	84 b9       	out	0x04, r24	; 4
  a8:	08 95       	ret
		else
		DDRB &=	~(1<<pin);
  aa:	24 b1       	in	r18, 0x04	; 4
  ac:	81 e0       	ldi	r24, 0x01	; 1
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	02 c0       	rjmp	.+4      	; 0xb6 <setPin+0x36>
  b2:	88 0f       	add	r24, r24
  b4:	99 1f       	adc	r25, r25
  b6:	6a 95       	dec	r22
  b8:	e2 f7       	brpl	.-8      	; 0xb2 <setPin+0x32>
  ba:	80 95       	com	r24
  bc:	82 23       	and	r24, r18
  be:	84 b9       	out	0x04, r24	; 4
  c0:	08 95       	ret
		break;
		case 'C':
		if(state==1)
  c2:	41 30       	cpi	r20, 0x01	; 1
  c4:	51 05       	cpc	r21, r1
  c6:	59 f4       	brne	.+22     	; 0xde <setPin+0x5e>
		DDRC |= (1<<pin);
  c8:	27 b1       	in	r18, 0x07	; 7
  ca:	81 e0       	ldi	r24, 0x01	; 1
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	02 c0       	rjmp	.+4      	; 0xd4 <setPin+0x54>
  d0:	88 0f       	add	r24, r24
  d2:	99 1f       	adc	r25, r25
  d4:	6a 95       	dec	r22
  d6:	e2 f7       	brpl	.-8      	; 0xd0 <setPin+0x50>
  d8:	82 2b       	or	r24, r18
  da:	87 b9       	out	0x07, r24	; 7
  dc:	08 95       	ret
		else
		DDRC &=	~(1<<pin);
  de:	27 b1       	in	r18, 0x07	; 7
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	02 c0       	rjmp	.+4      	; 0xea <setPin+0x6a>
  e6:	88 0f       	add	r24, r24
  e8:	99 1f       	adc	r25, r25
  ea:	6a 95       	dec	r22
  ec:	e2 f7       	brpl	.-8      	; 0xe6 <setPin+0x66>
  ee:	80 95       	com	r24
  f0:	82 23       	and	r24, r18
  f2:	87 b9       	out	0x07, r24	; 7
  f4:	08 95       	ret
		break;
		case 'D':
		if(state==1)
  f6:	41 30       	cpi	r20, 0x01	; 1
  f8:	51 05       	cpc	r21, r1
  fa:	59 f4       	brne	.+22     	; 0x112 <setPin+0x92>
		DDRD |= (1<<pin);
  fc:	2a b1       	in	r18, 0x0a	; 10
  fe:	81 e0       	ldi	r24, 0x01	; 1
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	02 c0       	rjmp	.+4      	; 0x108 <setPin+0x88>
 104:	88 0f       	add	r24, r24
 106:	99 1f       	adc	r25, r25
 108:	6a 95       	dec	r22
 10a:	e2 f7       	brpl	.-8      	; 0x104 <setPin+0x84>
 10c:	82 2b       	or	r24, r18
 10e:	8a b9       	out	0x0a, r24	; 10
 110:	08 95       	ret
		else
		DDRD &=	~(1<<pin);
 112:	2a b1       	in	r18, 0x0a	; 10
 114:	81 e0       	ldi	r24, 0x01	; 1
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	02 c0       	rjmp	.+4      	; 0x11e <setPin+0x9e>
 11a:	88 0f       	add	r24, r24
 11c:	99 1f       	adc	r25, r25
 11e:	6a 95       	dec	r22
 120:	e2 f7       	brpl	.-8      	; 0x11a <setPin+0x9a>
 122:	80 95       	com	r24
 124:	82 23       	and	r24, r18
 126:	8a b9       	out	0x0a, r24	; 10
 128:	08 95       	ret
		break;
		default:
		DDRB=0xFF;
 12a:	8f ef       	ldi	r24, 0xFF	; 255
 12c:	84 b9       	out	0x04, r24	; 4
		PORTB=0xFF;
 12e:	85 b9       	out	0x05, r24	; 5
 130:	08 95       	ret

00000132 <pwm>:
// 		PORTB=0xFF;
// 	}
// }


void pwm(int pin,int num){
 132:	cf 93       	push	r28
 134:	9c 01       	movw	r18, r24
 136:	c6 2f       	mov	r28, r22
	TCCR0B |= (1<<CS00)|(1<<CS01);//prescalar /64
 138:	95 b5       	in	r25, 0x25	; 37
 13a:	93 60       	ori	r25, 0x03	; 3
 13c:	95 bd       	out	0x25, r25	; 37
	TCCR2B |= (1<<CS20)|(1<<CS21);//prescalar /64
 13e:	e1 eb       	ldi	r30, 0xB1	; 177
 140:	f0 e0       	ldi	r31, 0x00	; 0
 142:	90 81       	ld	r25, Z
 144:	93 60       	ori	r25, 0x03	; 3
 146:	90 83       	st	Z, r25
	switch(pin){
 148:	21 30       	cpi	r18, 0x01	; 1
 14a:	31 05       	cpc	r19, r1
 14c:	b9 f0       	breq	.+46     	; 0x17c <pwm+0x4a>
 14e:	1c f4       	brge	.+6      	; 0x156 <pwm+0x24>
 150:	23 2b       	or	r18, r19
 152:	41 f0       	breq	.+16     	; 0x164 <pwm+0x32>
 154:	3c c0       	rjmp	.+120    	; 0x1ce <pwm+0x9c>
 156:	22 30       	cpi	r18, 0x02	; 2
 158:	31 05       	cpc	r19, r1
 15a:	e1 f0       	breq	.+56     	; 0x194 <pwm+0x62>
 15c:	23 30       	cpi	r18, 0x03	; 3
 15e:	31 05       	cpc	r19, r1
 160:	41 f1       	breq	.+80     	; 0x1b2 <pwm+0x80>
 162:	35 c0       	rjmp	.+106    	; 0x1ce <pwm+0x9c>
		case 0:
		TCCR0A |= (1<<WGM01)|(1<<WGM00)|(1<<COM0A1);//fast pwm, non inverted
 164:	84 b5       	in	r24, 0x24	; 36
 166:	83 68       	ori	r24, 0x83	; 131
 168:	84 bd       	out	0x24, r24	; 36
		setPin('D',6,1);
 16a:	41 e0       	ldi	r20, 0x01	; 1
 16c:	50 e0       	ldi	r21, 0x00	; 0
 16e:	66 e0       	ldi	r22, 0x06	; 6
 170:	70 e0       	ldi	r23, 0x00	; 0
 172:	84 e4       	ldi	r24, 0x44	; 68
 174:	0e 94 40 00 	call	0x80	; 0x80 <setPin>
		OCR0A=num;
 178:	c7 bd       	out	0x27, r28	; 39
		break;
 17a:	29 c0       	rjmp	.+82     	; 0x1ce <pwm+0x9c>
		case 1:
		TCCR0A |= (1<<WGM01)|(1<<WGM00)|(1<<COM0B1);//fast pwm, non inverted
 17c:	84 b5       	in	r24, 0x24	; 36
 17e:	83 62       	ori	r24, 0x23	; 35
 180:	84 bd       	out	0x24, r24	; 36
		setPin('D',5,1);
 182:	41 e0       	ldi	r20, 0x01	; 1
 184:	50 e0       	ldi	r21, 0x00	; 0
 186:	65 e0       	ldi	r22, 0x05	; 5
 188:	70 e0       	ldi	r23, 0x00	; 0
 18a:	84 e4       	ldi	r24, 0x44	; 68
 18c:	0e 94 40 00 	call	0x80	; 0x80 <setPin>
		OCR0B=num;
 190:	c8 bd       	out	0x28, r28	; 40
		break;
 192:	1d c0       	rjmp	.+58     	; 0x1ce <pwm+0x9c>
		case 2:
		TCCR2A |= (1<<WGM21)|(1<<WGM20)|(1<<COM2A1);//fast pwm, non inverted
 194:	e0 eb       	ldi	r30, 0xB0	; 176
 196:	f0 e0       	ldi	r31, 0x00	; 0
 198:	80 81       	ld	r24, Z
 19a:	83 68       	ori	r24, 0x83	; 131
 19c:	80 83       	st	Z, r24
		setPin('B',3,1);
 19e:	41 e0       	ldi	r20, 0x01	; 1
 1a0:	50 e0       	ldi	r21, 0x00	; 0
 1a2:	63 e0       	ldi	r22, 0x03	; 3
 1a4:	70 e0       	ldi	r23, 0x00	; 0
 1a6:	82 e4       	ldi	r24, 0x42	; 66
 1a8:	0e 94 40 00 	call	0x80	; 0x80 <setPin>
		OCR2A=num;
 1ac:	c0 93 b3 00 	sts	0x00B3, r28	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
		break;
 1b0:	0e c0       	rjmp	.+28     	; 0x1ce <pwm+0x9c>
		case 3:
		TCCR2A |= (1<<WGM21)|(1<<WGM20)|(1<<COM2B1);//fast pwm, non inverted
 1b2:	e0 eb       	ldi	r30, 0xB0	; 176
 1b4:	f0 e0       	ldi	r31, 0x00	; 0
 1b6:	80 81       	ld	r24, Z
 1b8:	83 62       	ori	r24, 0x23	; 35
 1ba:	80 83       	st	Z, r24
		setPin('D',3,1);
 1bc:	41 e0       	ldi	r20, 0x01	; 1
 1be:	50 e0       	ldi	r21, 0x00	; 0
 1c0:	63 e0       	ldi	r22, 0x03	; 3
 1c2:	70 e0       	ldi	r23, 0x00	; 0
 1c4:	84 e4       	ldi	r24, 0x44	; 68
 1c6:	0e 94 40 00 	call	0x80	; 0x80 <setPin>
		OCR2B=num;
 1ca:	c0 93 b4 00 	sts	0x00B4, r28	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
		break;
	}
}
 1ce:	cf 91       	pop	r28
 1d0:	08 95       	ret

000001d2 <main>:
	while(1)
	{
		int r=255;
		int g=120;
		int b=50;
		pwm(0,g);
 1d2:	68 e7       	ldi	r22, 0x78	; 120
 1d4:	70 e0       	ldi	r23, 0x00	; 0
 1d6:	80 e0       	ldi	r24, 0x00	; 0
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	0e 94 99 00 	call	0x132	; 0x132 <pwm>
		pwm(1,b);
 1de:	62 e3       	ldi	r22, 0x32	; 50
 1e0:	70 e0       	ldi	r23, 0x00	; 0
 1e2:	81 e0       	ldi	r24, 0x01	; 1
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	0e 94 99 00 	call	0x132	; 0x132 <pwm>
		pwm(3,r);
 1ea:	6f ef       	ldi	r22, 0xFF	; 255
 1ec:	70 e0       	ldi	r23, 0x00	; 0
 1ee:	83 e0       	ldi	r24, 0x03	; 3
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	0e 94 99 00 	call	0x132	; 0x132 <pwm>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1f6:	2f ef       	ldi	r18, 0xFF	; 255
 1f8:	83 ed       	ldi	r24, 0xD3	; 211
 1fa:	90 e3       	ldi	r25, 0x30	; 48
 1fc:	21 50       	subi	r18, 0x01	; 1
 1fe:	80 40       	sbci	r24, 0x00	; 0
 200:	90 40       	sbci	r25, 0x00	; 0
 202:	e1 f7       	brne	.-8      	; 0x1fc <main+0x2a>
 204:	00 c0       	rjmp	.+0      	; 0x206 <main+0x34>
 206:	00 00       	nop
 208:	e4 cf       	rjmp	.-56     	; 0x1d2 <main>

0000020a <_exit>:
 20a:	f8 94       	cli

0000020c <__stop_program>:
 20c:	ff cf       	rjmp	.-2      	; 0x20c <__stop_program>
