
RGB.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000d0  00800100  0000125c  000012f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000125c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001b  008001d0  008001d0  000013c0  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000013c0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000141c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000100  00000000  00000000  0000145c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000215e  00000000  00000000  0000155c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000966  00000000  00000000  000036ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e1a  00000000  00000000  00004020  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000314  00000000  00000000  00004e3c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000065a  00000000  00000000  00005150  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000f7a  00000000  00000000  000057aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000138  00000000  00000000  00006724  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ec e5       	ldi	r30, 0x5C	; 92
      7c:	f2 e1       	ldi	r31, 0x12	; 18
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a0 3d       	cpi	r26, 0xD0	; 208
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	21 e0       	ldi	r18, 0x01	; 1
      8c:	a0 ed       	ldi	r26, 0xD0	; 208
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	ab 3e       	cpi	r26, 0xEB	; 235
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 78 04 	call	0x8f0	; 0x8f0 <main>
      9e:	0c 94 2c 09 	jmp	0x1258	; 0x1258 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <i2c_init>:
}

void lcd_lef_sh()
{
	lcd_cmd(0x18);      //----Command for Left Shift
	delay(200);
      a6:	82 e6       	ldi	r24, 0x62	; 98
      a8:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
      ac:	84 e0       	ldi	r24, 0x04	; 4
      ae:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
      b2:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
      b6:	08 95       	ret

000000b8 <i2c_start>:
      b8:	84 ea       	ldi	r24, 0xA4	; 164
      ba:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
      be:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
      c2:	88 23       	and	r24, r24
      c4:	e4 f7       	brge	.-8      	; 0xbe <i2c_start+0x6>
      c6:	08 95       	ret

000000c8 <i2c_write>:
      c8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
      cc:	84 e8       	ldi	r24, 0x84	; 132
      ce:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
      d2:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
      d6:	88 23       	and	r24, r24
      d8:	e4 f7       	brge	.-8      	; 0xd2 <i2c_write+0xa>
      da:	08 95       	ret

000000dc <delay>:
      dc:	40 e0       	ldi	r20, 0x00	; 0
      de:	50 e0       	ldi	r21, 0x00	; 0
      e0:	0a c0       	rjmp	.+20     	; 0xf6 <delay+0x1a>
      e2:	2f 5f       	subi	r18, 0xFF	; 255
      e4:	3f 4f       	sbci	r19, 0xFF	; 255
      e6:	02 c0       	rjmp	.+4      	; 0xec <delay+0x10>
      e8:	20 e0       	ldi	r18, 0x00	; 0
      ea:	30 e0       	ldi	r19, 0x00	; 0
      ec:	29 37       	cpi	r18, 0x79	; 121
      ee:	31 05       	cpc	r19, r1
      f0:	c4 f3       	brlt	.-16     	; 0xe2 <delay+0x6>
      f2:	4f 5f       	subi	r20, 0xFF	; 255
      f4:	5f 4f       	sbci	r21, 0xFF	; 255
      f6:	84 17       	cp	r24, r20
      f8:	95 07       	cpc	r25, r21
      fa:	b4 f7       	brge	.-20     	; 0xe8 <delay+0xc>
      fc:	08 95       	ret

000000fe <toggle>:
      fe:	eb eb       	ldi	r30, 0xBB	; 187
     100:	f0 e0       	ldi	r31, 0x00	; 0
     102:	80 81       	ld	r24, Z
     104:	82 60       	ori	r24, 0x02	; 2
     106:	80 83       	st	Z, r24
     108:	84 e8       	ldi	r24, 0x84	; 132
     10a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     10e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     112:	88 23       	and	r24, r24
     114:	e4 f7       	brge	.-8      	; 0x10e <toggle+0x10>
     116:	81 e0       	ldi	r24, 0x01	; 1
     118:	90 e0       	ldi	r25, 0x00	; 0
     11a:	0e 94 6e 00 	call	0xdc	; 0xdc <delay>
     11e:	eb eb       	ldi	r30, 0xBB	; 187
     120:	f0 e0       	ldi	r31, 0x00	; 0
     122:	80 81       	ld	r24, Z
     124:	8d 7f       	andi	r24, 0xFD	; 253
     126:	80 83       	st	Z, r24
     128:	84 e8       	ldi	r24, 0x84	; 132
     12a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     12e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     132:	88 23       	and	r24, r24
     134:	e4 f7       	brge	.-8      	; 0x12e <toggle+0x30>
     136:	08 95       	ret

00000138 <lcd_cmd_hf>:
     138:	eb eb       	ldi	r30, 0xBB	; 187
     13a:	f0 e0       	ldi	r31, 0x00	; 0
     13c:	90 81       	ld	r25, Z
     13e:	9e 7f       	andi	r25, 0xFE	; 254
     140:	90 83       	st	Z, r25
     142:	94 e8       	ldi	r25, 0x84	; 132
     144:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     148:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     14c:	99 23       	and	r25, r25
     14e:	e4 f7       	brge	.-8      	; 0x148 <lcd_cmd_hf+0x10>
     150:	eb eb       	ldi	r30, 0xBB	; 187
     152:	f0 e0       	ldi	r31, 0x00	; 0
     154:	90 81       	ld	r25, Z
     156:	9f 70       	andi	r25, 0x0F	; 15
     158:	90 83       	st	Z, r25
     15a:	94 e8       	ldi	r25, 0x84	; 132
     15c:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     160:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     164:	99 23       	and	r25, r25
     166:	e4 f7       	brge	.-8      	; 0x160 <lcd_cmd_hf+0x28>
     168:	eb eb       	ldi	r30, 0xBB	; 187
     16a:	f0 e0       	ldi	r31, 0x00	; 0
     16c:	90 81       	ld	r25, Z
     16e:	80 7f       	andi	r24, 0xF0	; 240
     170:	89 2b       	or	r24, r25
     172:	80 83       	st	Z, r24
     174:	84 e8       	ldi	r24, 0x84	; 132
     176:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     17a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     17e:	88 23       	and	r24, r24
     180:	e4 f7       	brge	.-8      	; 0x17a <lcd_cmd_hf+0x42>
     182:	0e 94 7f 00 	call	0xfe	; 0xfe <toggle>
     186:	08 95       	ret

00000188 <lcd_cmd>:
     188:	cf 93       	push	r28
     18a:	c8 2f       	mov	r28, r24
     18c:	eb eb       	ldi	r30, 0xBB	; 187
     18e:	f0 e0       	ldi	r31, 0x00	; 0
     190:	80 81       	ld	r24, Z
     192:	8e 7f       	andi	r24, 0xFE	; 254
     194:	80 83       	st	Z, r24
     196:	84 e8       	ldi	r24, 0x84	; 132
     198:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     19c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     1a0:	88 23       	and	r24, r24
     1a2:	e4 f7       	brge	.-8      	; 0x19c <lcd_cmd+0x14>
     1a4:	eb eb       	ldi	r30, 0xBB	; 187
     1a6:	f0 e0       	ldi	r31, 0x00	; 0
     1a8:	80 81       	ld	r24, Z
     1aa:	8f 70       	andi	r24, 0x0F	; 15
     1ac:	80 83       	st	Z, r24
     1ae:	84 e8       	ldi	r24, 0x84	; 132
     1b0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     1b4:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     1b8:	88 23       	and	r24, r24
     1ba:	e4 f7       	brge	.-8      	; 0x1b4 <lcd_cmd+0x2c>
     1bc:	eb eb       	ldi	r30, 0xBB	; 187
     1be:	f0 e0       	ldi	r31, 0x00	; 0
     1c0:	80 81       	ld	r24, Z
     1c2:	9c 2f       	mov	r25, r28
     1c4:	90 7f       	andi	r25, 0xF0	; 240
     1c6:	89 2b       	or	r24, r25
     1c8:	80 83       	st	Z, r24
     1ca:	84 e8       	ldi	r24, 0x84	; 132
     1cc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     1d0:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     1d4:	88 23       	and	r24, r24
     1d6:	e4 f7       	brge	.-8      	; 0x1d0 <lcd_cmd+0x48>
     1d8:	0e 94 7f 00 	call	0xfe	; 0xfe <toggle>
     1dc:	eb eb       	ldi	r30, 0xBB	; 187
     1de:	f0 e0       	ldi	r31, 0x00	; 0
     1e0:	80 81       	ld	r24, Z
     1e2:	8f 70       	andi	r24, 0x0F	; 15
     1e4:	80 83       	st	Z, r24
     1e6:	84 e8       	ldi	r24, 0x84	; 132
     1e8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     1ec:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     1f0:	88 23       	and	r24, r24
     1f2:	e4 f7       	brge	.-8      	; 0x1ec <lcd_cmd+0x64>
     1f4:	eb eb       	ldi	r30, 0xBB	; 187
     1f6:	f0 e0       	ldi	r31, 0x00	; 0
     1f8:	20 81       	ld	r18, Z
     1fa:	30 e1       	ldi	r19, 0x10	; 16
     1fc:	c3 9f       	mul	r28, r19
     1fe:	c0 01       	movw	r24, r0
     200:	11 24       	eor	r1, r1
     202:	82 2b       	or	r24, r18
     204:	80 83       	st	Z, r24
     206:	84 e8       	ldi	r24, 0x84	; 132
     208:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     20c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     210:	88 23       	and	r24, r24
     212:	e4 f7       	brge	.-8      	; 0x20c <lcd_cmd+0x84>
     214:	0e 94 7f 00 	call	0xfe	; 0xfe <toggle>
     218:	cf 91       	pop	r28
     21a:	08 95       	ret

0000021c <lcd_init>:
     21c:	80 e3       	ldi	r24, 0x30	; 48
     21e:	0e 94 9c 00 	call	0x138	; 0x138 <lcd_cmd_hf>
     222:	80 e3       	ldi	r24, 0x30	; 48
     224:	0e 94 9c 00 	call	0x138	; 0x138 <lcd_cmd_hf>
     228:	80 e2       	ldi	r24, 0x20	; 32
     22a:	0e 94 9c 00 	call	0x138	; 0x138 <lcd_cmd_hf>
     22e:	88 e2       	ldi	r24, 0x28	; 40
     230:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_cmd>
     234:	8c e0       	ldi	r24, 0x0C	; 12
     236:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_cmd>
     23a:	81 e0       	ldi	r24, 0x01	; 1
     23c:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_cmd>
     240:	86 e0       	ldi	r24, 0x06	; 6
     242:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_cmd>
     246:	80 e8       	ldi	r24, 0x80	; 128
     248:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_cmd>
     24c:	08 95       	ret

0000024e <lcd_dwr>:
     24e:	cf 93       	push	r28
     250:	c8 2f       	mov	r28, r24
     252:	eb eb       	ldi	r30, 0xBB	; 187
     254:	f0 e0       	ldi	r31, 0x00	; 0
     256:	80 81       	ld	r24, Z
     258:	81 60       	ori	r24, 0x01	; 1
     25a:	80 83       	st	Z, r24
     25c:	84 e8       	ldi	r24, 0x84	; 132
     25e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     262:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     266:	88 23       	and	r24, r24
     268:	e4 f7       	brge	.-8      	; 0x262 <lcd_dwr+0x14>
     26a:	eb eb       	ldi	r30, 0xBB	; 187
     26c:	f0 e0       	ldi	r31, 0x00	; 0
     26e:	80 81       	ld	r24, Z
     270:	8f 70       	andi	r24, 0x0F	; 15
     272:	80 83       	st	Z, r24
     274:	84 e8       	ldi	r24, 0x84	; 132
     276:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     27a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     27e:	88 23       	and	r24, r24
     280:	e4 f7       	brge	.-8      	; 0x27a <lcd_dwr+0x2c>
     282:	eb eb       	ldi	r30, 0xBB	; 187
     284:	f0 e0       	ldi	r31, 0x00	; 0
     286:	80 81       	ld	r24, Z
     288:	9c 2f       	mov	r25, r28
     28a:	90 7f       	andi	r25, 0xF0	; 240
     28c:	89 2b       	or	r24, r25
     28e:	80 83       	st	Z, r24
     290:	84 e8       	ldi	r24, 0x84	; 132
     292:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     296:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     29a:	88 23       	and	r24, r24
     29c:	e4 f7       	brge	.-8      	; 0x296 <lcd_dwr+0x48>
     29e:	0e 94 7f 00 	call	0xfe	; 0xfe <toggle>
     2a2:	eb eb       	ldi	r30, 0xBB	; 187
     2a4:	f0 e0       	ldi	r31, 0x00	; 0
     2a6:	80 81       	ld	r24, Z
     2a8:	8f 70       	andi	r24, 0x0F	; 15
     2aa:	80 83       	st	Z, r24
     2ac:	84 e8       	ldi	r24, 0x84	; 132
     2ae:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     2b2:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     2b6:	88 23       	and	r24, r24
     2b8:	e4 f7       	brge	.-8      	; 0x2b2 <lcd_dwr+0x64>
     2ba:	eb eb       	ldi	r30, 0xBB	; 187
     2bc:	f0 e0       	ldi	r31, 0x00	; 0
     2be:	20 81       	ld	r18, Z
     2c0:	30 e1       	ldi	r19, 0x10	; 16
     2c2:	c3 9f       	mul	r28, r19
     2c4:	c0 01       	movw	r24, r0
     2c6:	11 24       	eor	r1, r1
     2c8:	82 2b       	or	r24, r18
     2ca:	80 83       	st	Z, r24
     2cc:	84 e8       	ldi	r24, 0x84	; 132
     2ce:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     2d2:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     2d6:	88 23       	and	r24, r24
     2d8:	e4 f7       	brge	.-8      	; 0x2d2 <lcd_dwr+0x84>
     2da:	0e 94 7f 00 	call	0xfe	; 0xfe <toggle>
     2de:	cf 91       	pop	r28
     2e0:	08 95       	ret

000002e2 <lcd_msg>:
     2e2:	cf 93       	push	r28
     2e4:	df 93       	push	r29
     2e6:	ec 01       	movw	r28, r24
     2e8:	03 c0       	rjmp	.+6      	; 0x2f0 <lcd_msg+0xe>
     2ea:	21 96       	adiw	r28, 0x01	; 1
     2ec:	0e 94 27 01 	call	0x24e	; 0x24e <lcd_dwr>
     2f0:	88 81       	ld	r24, Y
     2f2:	81 11       	cpse	r24, r1
     2f4:	fa cf       	rjmp	.-12     	; 0x2ea <lcd_msg+0x8>
     2f6:	df 91       	pop	r29
     2f8:	cf 91       	pop	r28
     2fa:	08 95       	ret

000002fc <keyfind>:
unsigned char colloc, rowloc;
char keyfind(){

	while (1)
	{
		KEY_DDR = 0xF0;           /* set the directions of the port */
     2fc:	80 ef       	ldi	r24, 0xF0	; 240
     2fe:	8a b9       	out	0x0a, r24	; 10
		KEY_PRT = 0xFF;
     300:	8f ef       	ldi	r24, 0xFF	; 255
     302:	8b b9       	out	0x0b, r24	; 11

		do
		{
			KEY_PRT &= 0x0F;      /* mask PORT for column read only */
     304:	8b b1       	in	r24, 0x0b	; 11
     306:	8f 70       	andi	r24, 0x0F	; 15
     308:	8b b9       	out	0x0b, r24	; 11
			asm("NOP");
     30a:	00 00       	nop
			colloc = (KEY_PIN & 0x0F); /* read status of column */
     30c:	89 b1       	in	r24, 0x09	; 9
     30e:	8f 70       	andi	r24, 0x0F	; 15
     310:	80 93 d9 01 	sts	0x01D9, r24	; 0x8001d9 <colloc>
		} while (colloc != 0x0F);
     314:	8f 30       	cpi	r24, 0x0F	; 15
     316:	b1 f7       	brne	.-20     	; 0x304 <keyfind+0x8>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     318:	2f ef       	ldi	r18, 0xFF	; 255
     31a:	89 ef       	ldi	r24, 0xF9	; 249
     31c:	90 e0       	ldi	r25, 0x00	; 0
     31e:	21 50       	subi	r18, 0x01	; 1
     320:	80 40       	sbci	r24, 0x00	; 0
     322:	90 40       	sbci	r25, 0x00	; 0
     324:	e1 f7       	brne	.-8      	; 0x31e <keyfind+0x22>
     326:	00 c0       	rjmp	.+0      	; 0x328 <keyfind+0x2c>
     328:	00 00       	nop
		do
		{
			do
			{   //codes for check whether which key is pressed
				_delay_ms(20);
				colloc = (KEY_PIN & 0x0F);
     32a:	89 b1       	in	r24, 0x09	; 9
     32c:	8f 70       	andi	r24, 0x0F	; 15
     32e:	80 93 d9 01 	sts	0x01D9, r24	; 0x8001d9 <colloc>
				} while (colloc == 0x0F);       /* check for any key press */
     332:	8f 30       	cpi	r24, 0x0F	; 15
     334:	89 f3       	breq	.-30     	; 0x318 <keyfind+0x1c>
     336:	2f ef       	ldi	r18, 0xFF	; 255
     338:	83 ef       	ldi	r24, 0xF3	; 243
     33a:	91 e0       	ldi	r25, 0x01	; 1
     33c:	21 50       	subi	r18, 0x01	; 1
     33e:	80 40       	sbci	r24, 0x00	; 0
     340:	90 40       	sbci	r25, 0x00	; 0
     342:	e1 f7       	brne	.-8      	; 0x33c <keyfind+0x40>
     344:	00 c0       	rjmp	.+0      	; 0x346 <keyfind+0x4a>
     346:	00 00       	nop

				_delay_ms (40);
				colloc = (KEY_PIN & 0x0F);
     348:	89 b1       	in	r24, 0x09	; 9
     34a:	8f 70       	andi	r24, 0x0F	; 15
     34c:	80 93 d9 01 	sts	0x01D9, r24	; 0x8001d9 <colloc>
			} while (colloc == 0x0F);
     350:	8f 30       	cpi	r24, 0x0F	; 15
     352:	11 f3       	breq	.-60     	; 0x318 <keyfind+0x1c>

			/* check the which row's key is pressed */
			KEY_PRT = 0xEF;            /* check 1st row */
     354:	8f ee       	ldi	r24, 0xEF	; 239
     356:	8b b9       	out	0x0b, r24	; 11
			asm("NOP");
     358:	00 00       	nop
			colloc = (KEY_PIN & 0x0F);
     35a:	89 b1       	in	r24, 0x09	; 9
     35c:	8f 70       	andi	r24, 0x0F	; 15
     35e:	80 93 d9 01 	sts	0x01D9, r24	; 0x8001d9 <colloc>
			if (colloc != 0x0F)
     362:	8f 30       	cpi	r24, 0x0F	; 15
     364:	19 f0       	breq	.+6      	; 0x36c <keyfind+0x70>
			{
				rowloc = 0;
     366:	10 92 de 01 	sts	0x01DE, r1	; 0x8001de <rowloc>
				break;
     36a:	27 c0       	rjmp	.+78     	; 0x3ba <keyfind+0xbe>
			}

			KEY_PRT = 0xDF;   /* check 2nd row */
     36c:	8f ed       	ldi	r24, 0xDF	; 223
     36e:	8b b9       	out	0x0b, r24	; 11
			asm("NOP");
     370:	00 00       	nop
			colloc = (KEY_PIN & 0x0F);
     372:	89 b1       	in	r24, 0x09	; 9
     374:	8f 70       	andi	r24, 0x0F	; 15
     376:	80 93 d9 01 	sts	0x01D9, r24	; 0x8001d9 <colloc>
			if (colloc != 0x0F)
     37a:	8f 30       	cpi	r24, 0x0F	; 15
     37c:	21 f0       	breq	.+8      	; 0x386 <keyfind+0x8a>
			{
				rowloc = 1;
     37e:	81 e0       	ldi	r24, 0x01	; 1
     380:	80 93 de 01 	sts	0x01DE, r24	; 0x8001de <rowloc>
				break;
     384:	1a c0       	rjmp	.+52     	; 0x3ba <keyfind+0xbe>
			}

			KEY_PRT = 0xBF;   /* check 3rd row */
     386:	8f eb       	ldi	r24, 0xBF	; 191
     388:	8b b9       	out	0x0b, r24	; 11
			asm("NOP");
     38a:	00 00       	nop
			colloc = (KEY_PIN & 0x0F);
     38c:	89 b1       	in	r24, 0x09	; 9
     38e:	8f 70       	andi	r24, 0x0F	; 15
     390:	80 93 d9 01 	sts	0x01D9, r24	; 0x8001d9 <colloc>
			if (colloc != 0x0F)
     394:	8f 30       	cpi	r24, 0x0F	; 15
     396:	21 f0       	breq	.+8      	; 0x3a0 <keyfind+0xa4>
			{
				rowloc = 2;
     398:	82 e0       	ldi	r24, 0x02	; 2
     39a:	80 93 de 01 	sts	0x01DE, r24	; 0x8001de <rowloc>
				break;
     39e:	0d c0       	rjmp	.+26     	; 0x3ba <keyfind+0xbe>
			}

			KEY_PRT = 0x7F;   /* check 4th row */
     3a0:	8f e7       	ldi	r24, 0x7F	; 127
     3a2:	8b b9       	out	0x0b, r24	; 11
			asm("NOP");
     3a4:	00 00       	nop
			colloc = (KEY_PIN & 0x0F);
     3a6:	89 b1       	in	r24, 0x09	; 9
     3a8:	8f 70       	andi	r24, 0x0F	; 15
     3aa:	80 93 d9 01 	sts	0x01D9, r24	; 0x8001d9 <colloc>
			if (colloc != 0x0F)
     3ae:	8f 30       	cpi	r24, 0x0F	; 15
     3b0:	09 f4       	brne	.+2      	; 0x3b4 <keyfind+0xb8>
     3b2:	a4 cf       	rjmp	.-184    	; 0x2fc <keyfind>
			{
				rowloc = 3;
     3b4:	83 e0       	ldi	r24, 0x03	; 3
     3b6:	80 93 de 01 	sts	0x01DE, r24	; 0x8001de <rowloc>
				break;
			}
		}
		// check the column and return the value
		if (colloc == 0x0E) {
     3ba:	80 91 d9 01 	lds	r24, 0x01D9	; 0x8001d9 <colloc>
     3be:	8e 30       	cpi	r24, 0x0E	; 14
     3c0:	59 f4       	brne	.+22     	; 0x3d8 <keyfind+0xdc>
			return (keypad[rowloc][0]);
     3c2:	e0 91 de 01 	lds	r30, 0x01DE	; 0x8001de <rowloc>
     3c6:	f0 e0       	ldi	r31, 0x00	; 0
     3c8:	ee 0f       	add	r30, r30
     3ca:	ff 1f       	adc	r31, r31
     3cc:	ee 0f       	add	r30, r30
     3ce:	ff 1f       	adc	r31, r31
     3d0:	ef 5f       	subi	r30, 0xFF	; 255
     3d2:	fe 4f       	sbci	r31, 0xFE	; 254
     3d4:	80 81       	ld	r24, Z
     3d6:	08 95       	ret
		}
		else if (colloc == 0x0D) {
     3d8:	8d 30       	cpi	r24, 0x0D	; 13
     3da:	59 f4       	brne	.+22     	; 0x3f2 <keyfind+0xf6>
			return (keypad[rowloc][1]);
     3dc:	e0 91 de 01 	lds	r30, 0x01DE	; 0x8001de <rowloc>
     3e0:	f0 e0       	ldi	r31, 0x00	; 0
     3e2:	ee 0f       	add	r30, r30
     3e4:	ff 1f       	adc	r31, r31
     3e6:	ee 0f       	add	r30, r30
     3e8:	ff 1f       	adc	r31, r31
     3ea:	ef 5f       	subi	r30, 0xFF	; 255
     3ec:	fe 4f       	sbci	r31, 0xFE	; 254
     3ee:	81 81       	ldd	r24, Z+1	; 0x01
     3f0:	08 95       	ret
		}
		else if (colloc == 0x0B) {
     3f2:	8b 30       	cpi	r24, 0x0B	; 11
     3f4:	59 f4       	brne	.+22     	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
			return (keypad[rowloc][2]);
     3f6:	e0 91 de 01 	lds	r30, 0x01DE	; 0x8001de <rowloc>
     3fa:	f0 e0       	ldi	r31, 0x00	; 0
     3fc:	ee 0f       	add	r30, r30
     3fe:	ff 1f       	adc	r31, r31
     400:	ee 0f       	add	r30, r30
     402:	ff 1f       	adc	r31, r31
     404:	ef 5f       	subi	r30, 0xFF	; 255
     406:	fe 4f       	sbci	r31, 0xFE	; 254
     408:	82 81       	ldd	r24, Z+2	; 0x02
     40a:	08 95       	ret
		}
		else {
			return (keypad[rowloc][3]);
     40c:	e0 91 de 01 	lds	r30, 0x01DE	; 0x8001de <rowloc>
     410:	f0 e0       	ldi	r31, 0x00	; 0
     412:	ee 0f       	add	r30, r30
     414:	ff 1f       	adc	r31, r31
     416:	ee 0f       	add	r30, r30
     418:	ff 1f       	adc	r31, r31
     41a:	ef 5f       	subi	r30, 0xFF	; 255
     41c:	fe 4f       	sbci	r31, 0xFE	; 254
     41e:	83 81       	ldd	r24, Z+3	; 0x03
		}
	}
     420:	08 95       	ret

00000422 <adc_init>:
	uint16_t Red_val, Green_val, Blue_val;
	
	void adc_init()
	{

		ADMUX = (1 << REFS0) | (1 << MUX0) | (1 << MUX1);// Enable the analog read
     422:	83 e4       	ldi	r24, 0x43	; 67
     424:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>

		//set the prescaler
		ADCSRA = (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1);
     428:	86 e8       	ldi	r24, 0x86	; 134
     42a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     42e:	08 95       	ret

00000430 <adc_read>:
	}
	uint16_t adc_read(uint8_t ch)
	{
		// activate the analog reading process
		ch &= 0b00000111;
     430:	87 70       	andi	r24, 0x07	; 7
		ADMUX = (ADMUX & 0xF8) | ch;
     432:	ec e7       	ldi	r30, 0x7C	; 124
     434:	f0 e0       	ldi	r31, 0x00	; 0
     436:	90 81       	ld	r25, Z
     438:	98 7f       	andi	r25, 0xF8	; 248
     43a:	89 2b       	or	r24, r25
     43c:	80 83       	st	Z, r24

		
		ADCSRA |= (1 << ADSC);
     43e:	ea e7       	ldi	r30, 0x7A	; 122
     440:	f0 e0       	ldi	r31, 0x00	; 0
     442:	80 81       	ld	r24, Z
     444:	80 64       	ori	r24, 0x40	; 64
     446:	80 83       	st	Z, r24

		
		while (ADCSRA & (1 << ADSC));
     448:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     44c:	86 fd       	sbrc	r24, 6
     44e:	fc cf       	rjmp	.-8      	; 0x448 <adc_read+0x18>

		return (ADC);
     450:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     454:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
	}
     458:	08 95       	ret

0000045a <get_3_digit>:
	
	//function for get 3 digit from keypad
	char* get_3_digit() {
     45a:	cf 92       	push	r12
     45c:	df 92       	push	r13
     45e:	ef 92       	push	r14
     460:	ff 92       	push	r15
     462:	0f 93       	push	r16
     464:	1f 93       	push	r17
     466:	cf 93       	push	r28
     468:	df 93       	push	r29
     46a:	00 d0       	rcall	.+0      	; 0x46c <get_3_digit+0x12>
     46c:	00 d0       	rcall	.+0      	; 0x46e <get_3_digit+0x14>
     46e:	cd b7       	in	r28, 0x3d	; 61
     470:	de b7       	in	r29, 0x3e	; 62
		int count = 0;
     472:	e1 2c       	mov	r14, r1
     474:	f1 2c       	mov	r15, r1
		char* val;

		while (count < 3) {
     476:	17 c0       	rjmp	.+46     	; 0x4a6 <get_3_digit+0x4c>
			char digit = keyfind();
     478:	0e 94 7e 01 	call	0x2fc	; 0x2fc <keyfind>
     47c:	08 2f       	mov	r16, r24
			if (digit) {
     47e:	88 23       	and	r24, r24
     480:	91 f0       	breq	.+36     	; 0x4a6 <get_3_digit+0x4c>

				lcd_cmd(0xC9 + count);
     482:	89 ec       	ldi	r24, 0xC9	; 201
     484:	8e 0d       	add	r24, r14
     486:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_cmd>
				
				char* str_digit[2]; // convert "digit" to string to display
				str_digit[0] = digit;
     48a:	10 e0       	ldi	r17, 0x00	; 0
     48c:	1a 83       	std	Y+2, r17	; 0x02
     48e:	09 83       	std	Y+1, r16	; 0x01
				str_digit[1] = '\0';
     490:	1c 82       	std	Y+4, r1	; 0x04
     492:	1b 82       	std	Y+3, r1	; 0x03
				lcd_msg(str_digit);
     494:	ce 01       	movw	r24, r28
     496:	01 96       	adiw	r24, 0x01	; 1
     498:	0e 94 71 01 	call	0x2e2	; 0x2e2 <lcd_msg>
				val += digit;
     49c:	c0 0e       	add	r12, r16
     49e:	d1 1e       	adc	r13, r17
				count += 1;
     4a0:	8f ef       	ldi	r24, 0xFF	; 255
     4a2:	e8 1a       	sub	r14, r24
     4a4:	f8 0a       	sbc	r15, r24
	//function for get 3 digit from keypad
	char* get_3_digit() {
		int count = 0;
		char* val;

		while (count < 3) {
     4a6:	83 e0       	ldi	r24, 0x03	; 3
     4a8:	e8 16       	cp	r14, r24
     4aa:	f1 04       	cpc	r15, r1
     4ac:	2c f3       	brlt	.-54     	; 0x478 <get_3_digit+0x1e>
				val += digit;
				count += 1;
			}
		}
		return val;
	}
     4ae:	c6 01       	movw	r24, r12
     4b0:	0f 90       	pop	r0
     4b2:	0f 90       	pop	r0
     4b4:	0f 90       	pop	r0
     4b6:	0f 90       	pop	r0
     4b8:	df 91       	pop	r29
     4ba:	cf 91       	pop	r28
     4bc:	1f 91       	pop	r17
     4be:	0f 91       	pop	r16
     4c0:	ff 90       	pop	r15
     4c2:	ef 90       	pop	r14
     4c4:	df 90       	pop	r13
     4c6:	cf 90       	pop	r12
     4c8:	08 95       	ret

000004ca <get_3_int_digits>:
	
	//function for get 3 digits from keypad in the form of integers
	int get_3_int_digits() {
     4ca:	af 92       	push	r10
     4cc:	bf 92       	push	r11
     4ce:	cf 92       	push	r12
     4d0:	df 92       	push	r13
     4d2:	ef 92       	push	r14
     4d4:	ff 92       	push	r15
     4d6:	0f 93       	push	r16
     4d8:	1f 93       	push	r17
     4da:	cf 93       	push	r28
     4dc:	df 93       	push	r29
     4de:	00 d0       	rcall	.+0      	; 0x4e0 <get_3_int_digits+0x16>
     4e0:	cd b7       	in	r28, 0x3d	; 61
     4e2:	de b7       	in	r29, 0x3e	; 62
		int count = 0;
		int val=0;
     4e4:	a1 2c       	mov	r10, r1
     4e6:	b1 2c       	mov	r11, r1
		return val;
	}
	
	//function for get 3 digits from keypad in the form of integers
	int get_3_int_digits() {
		int count = 0;
     4e8:	e1 2c       	mov	r14, r1
     4ea:	f1 2c       	mov	r15, r1
		int val=0;

		while (count < 3) {
     4ec:	29 c0       	rjmp	.+82     	; 0x540 <get_3_int_digits+0x76>
			char digit = keyfind();
     4ee:	0e 94 7e 01 	call	0x2fc	; 0x2fc <keyfind>
			int num=digit-'0';
     4f2:	c8 2e       	mov	r12, r24
     4f4:	d1 2c       	mov	r13, r1
     4f6:	86 01       	movw	r16, r12
     4f8:	00 53       	subi	r16, 0x30	; 48
     4fa:	11 09       	sbc	r17, r1
			lcd_cmd(0xC9 + count);
     4fc:	89 ec       	ldi	r24, 0xC9	; 201
     4fe:	8e 0d       	add	r24, r14
     500:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_cmd>
			char* str_digit[1];
			str_digit[0] = digit;
     504:	da 82       	std	Y+2, r13	; 0x02
     506:	c9 82       	std	Y+1, r12	; 0x01
			lcd_msg(str_digit);
     508:	ce 01       	movw	r24, r28
     50a:	01 96       	adiw	r24, 0x01	; 1
     50c:	0e 94 71 01 	call	0x2e2	; 0x2e2 <lcd_msg>
			if(count == 2){
     510:	82 e0       	ldi	r24, 0x02	; 2
     512:	e8 16       	cp	r14, r24
     514:	f1 04       	cpc	r15, r1
     516:	19 f4       	brne	.+6      	; 0x51e <get_3_int_digits+0x54>
				val += num;
     518:	a0 0e       	add	r10, r16
     51a:	b1 1e       	adc	r11, r17
     51c:	0e c0       	rjmp	.+28     	; 0x53a <get_3_int_digits+0x70>
			}
			else{
				val = (val + num) * 10;
     51e:	c5 01       	movw	r24, r10
     520:	80 0f       	add	r24, r16
     522:	91 1f       	adc	r25, r17
     524:	5c 01       	movw	r10, r24
     526:	aa 0c       	add	r10, r10
     528:	bb 1c       	adc	r11, r11
     52a:	88 0f       	add	r24, r24
     52c:	99 1f       	adc	r25, r25
     52e:	88 0f       	add	r24, r24
     530:	99 1f       	adc	r25, r25
     532:	88 0f       	add	r24, r24
     534:	99 1f       	adc	r25, r25
     536:	a8 0e       	add	r10, r24
     538:	b9 1e       	adc	r11, r25
			}
			count += 1;
     53a:	8f ef       	ldi	r24, 0xFF	; 255
     53c:	e8 1a       	sub	r14, r24
     53e:	f8 0a       	sbc	r15, r24
	//function for get 3 digits from keypad in the form of integers
	int get_3_int_digits() {
		int count = 0;
		int val=0;

		while (count < 3) {
     540:	83 e0       	ldi	r24, 0x03	; 3
     542:	e8 16       	cp	r14, r24
     544:	f1 04       	cpc	r15, r1
     546:	9c f2       	brlt	.-90     	; 0x4ee <get_3_int_digits+0x24>
			}
			count += 1;
			
		}
		return val;
	}
     548:	c5 01       	movw	r24, r10
     54a:	0f 90       	pop	r0
     54c:	0f 90       	pop	r0
     54e:	df 91       	pop	r29
     550:	cf 91       	pop	r28
     552:	1f 91       	pop	r17
     554:	0f 91       	pop	r16
     556:	ff 90       	pop	r15
     558:	ef 90       	pop	r14
     55a:	df 90       	pop	r13
     55c:	cf 90       	pop	r12
     55e:	bf 90       	pop	r11
     560:	af 90       	pop	r10
     562:	08 95       	ret

00000564 <displayWrite>:
	// function for display details on lcd display
	char* displayWrite(char* clr_mode, char* clr ) {
     564:	ef 92       	push	r14
     566:	ff 92       	push	r15
     568:	0f 93       	push	r16
     56a:	1f 93       	push	r17
     56c:	cf 93       	push	r28
     56e:	df 93       	push	r29
     570:	7c 01       	movw	r14, r24
     572:	8b 01       	movw	r16, r22
		lcd_init();
     574:	0e 94 0e 01 	call	0x21c	; 0x21c <lcd_init>
		lcd_cmd(0xC0);
     578:	80 ec       	ldi	r24, 0xC0	; 192
     57a:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_cmd>
		lcd_msg(clr_mode);
     57e:	c7 01       	movw	r24, r14
     580:	0e 94 71 01 	call	0x2e2	; 0x2e2 <lcd_msg>
		lcd_cmd(0xC7);
     584:	87 ec       	ldi	r24, 0xC7	; 199
     586:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_cmd>
		lcd_msg(clr);
     58a:	c8 01       	movw	r24, r16
     58c:	0e 94 71 01 	call	0x2e2	; 0x2e2 <lcd_msg>
		lcd_cmd(0x80);
     590:	80 e8       	ldi	r24, 0x80	; 128
     592:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_cmd>
		lcd_msg("- clear");
     596:	8f e2       	ldi	r24, 0x2F	; 47
     598:	91 e0       	ldi	r25, 0x01	; 1
     59a:	0e 94 71 01 	call	0x2e2	; 0x2e2 <lcd_msg>
		lcd_cmd(0x89);
     59e:	89 e8       	ldi	r24, 0x89	; 137
     5a0:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_cmd>
		lcd_msg("Enter +");
     5a4:	87 e3       	ldi	r24, 0x37	; 55
     5a6:	91 e0       	ldi	r25, 0x01	; 1
     5a8:	0e 94 71 01 	call	0x2e2	; 0x2e2 <lcd_msg>
		char* val = get_3_digit();
     5ac:	0e 94 2d 02 	call	0x45a	; 0x45a <get_3_digit>
     5b0:	ec 01       	movw	r28, r24

		if (val) {
     5b2:	89 2b       	or	r24, r25
     5b4:	51 f4       	brne	.+20     	; 0x5ca <displayWrite+0x66>
     5b6:	0e c0       	rjmp	.+28     	; 0x5d4 <displayWrite+0x70>
			_Bool flag1 = true;
			while (flag1) {

				char stat = keyfind();
				if (stat == '+') {
					return  val;
     5b8:	8c 2f       	mov	r24, r28
     5ba:	9d 2f       	mov	r25, r29
     5bc:	0b c0       	rjmp	.+22     	; 0x5d4 <displayWrite+0x70>
				}
				else if (stat == '-') {
     5be:	8d 32       	cpi	r24, 0x2D	; 45
     5c0:	21 f4       	brne	.+8      	; 0x5ca <displayWrite+0x66>
					displayWrite(clr_mode, clr );
     5c2:	b8 01       	movw	r22, r16
     5c4:	c7 01       	movw	r24, r14
     5c6:	0e 94 b2 02 	call	0x564	; 0x564 <displayWrite>
		if (val) {

			_Bool flag1 = true;
			while (flag1) {

				char stat = keyfind();
     5ca:	0e 94 7e 01 	call	0x2fc	; 0x2fc <keyfind>
				if (stat == '+') {
     5ce:	8b 32       	cpi	r24, 0x2B	; 43
     5d0:	b1 f7       	brne	.-20     	; 0x5be <displayWrite+0x5a>
     5d2:	f2 cf       	rjmp	.-28     	; 0x5b8 <displayWrite+0x54>
				else if (stat == '-') {
					displayWrite(clr_mode, clr );
				}
			}
		}
	}
     5d4:	df 91       	pop	r29
     5d6:	cf 91       	pop	r28
     5d8:	1f 91       	pop	r17
     5da:	0f 91       	pop	r16
     5dc:	ff 90       	pop	r15
     5de:	ef 90       	pop	r14
     5e0:	08 95       	ret

000005e2 <RGB_off>:
	// off the RGB light
	void RGB_off(){
		DDRC &= ~(1<<PORTC0 | 1<<PORTC1 | 1<<PORTC2);
     5e2:	87 b1       	in	r24, 0x07	; 7
     5e4:	88 7f       	andi	r24, 0xF8	; 248
     5e6:	87 b9       	out	0x07, r24	; 7
     5e8:	08 95       	ret

000005ea <pwm>:
	}
	// function to activate relavant pwm pin
	void pwm(int pin,int num){
     5ea:	9c 01       	movw	r18, r24
		TCCR1B |= (1<<CS10)|(1<<CS11);//set prescalar /64
     5ec:	e1 e8       	ldi	r30, 0x81	; 129
     5ee:	f0 e0       	ldi	r31, 0x00	; 0
     5f0:	90 81       	ld	r25, Z
     5f2:	93 60       	ori	r25, 0x03	; 3
     5f4:	90 83       	st	Z, r25
		TCCR2B |= (1<<CS20)|(1<<CS21);//set prescalar /64
     5f6:	e1 eb       	ldi	r30, 0xB1	; 177
     5f8:	f0 e0       	ldi	r31, 0x00	; 0
     5fa:	90 81       	ld	r25, Z
     5fc:	93 60       	ori	r25, 0x03	; 3
     5fe:	90 83       	st	Z, r25
		switch(pin){
     600:	21 30       	cpi	r18, 0x01	; 1
     602:	31 05       	cpc	r19, r1
     604:	a1 f0       	breq	.+40     	; 0x62e <pwm+0x44>
     606:	22 30       	cpi	r18, 0x02	; 2
     608:	31 05       	cpc	r19, r1
     60a:	01 f1       	breq	.+64     	; 0x64c <pwm+0x62>
     60c:	23 2b       	or	r18, r19
     60e:	41 f5       	brne	.+80     	; 0x660 <pwm+0x76>
			case 0:
			TCCR1A |= (1<<WGM12)|(1<<WGM10)|(1<<COM1A1);//to get fast pwm and non inverted mode
     610:	e0 e8       	ldi	r30, 0x80	; 128
     612:	f0 e0       	ldi	r31, 0x00	; 0
     614:	80 81       	ld	r24, Z
     616:	89 68       	ori	r24, 0x89	; 137
     618:	80 83       	st	Z, r24
			DDRB |= (1<<PORTB1); //set the direction
     61a:	84 b1       	in	r24, 0x04	; 4
     61c:	82 60       	ori	r24, 0x02	; 2
     61e:	84 b9       	out	0x04, r24	; 4
			OCR1A=num;
     620:	86 2f       	mov	r24, r22
     622:	97 2f       	mov	r25, r23
     624:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     628:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
			break;
     62c:	08 95       	ret
			case 1:
			TCCR1A |= (1<<WGM12)|(1<<WGM10)|(1<<COM1B1);//to get fast pwm and non inverted mode
     62e:	e0 e8       	ldi	r30, 0x80	; 128
     630:	f0 e0       	ldi	r31, 0x00	; 0
     632:	80 81       	ld	r24, Z
     634:	89 62       	ori	r24, 0x29	; 41
     636:	80 83       	st	Z, r24
			DDRB |= (1<<PORTB2);
     638:	84 b1       	in	r24, 0x04	; 4
     63a:	84 60       	ori	r24, 0x04	; 4
     63c:	84 b9       	out	0x04, r24	; 4
			OCR1B=num;
     63e:	86 2f       	mov	r24, r22
     640:	97 2f       	mov	r25, r23
     642:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
     646:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
			break;
     64a:	08 95       	ret
			case 2:
			TCCR2A |= (1<<WGM21)|(1<<WGM20)|(1<<COM2A1);//to get fast pwm and non inverted mode
     64c:	e0 eb       	ldi	r30, 0xB0	; 176
     64e:	f0 e0       	ldi	r31, 0x00	; 0
     650:	80 81       	ld	r24, Z
     652:	83 68       	ori	r24, 0x83	; 131
     654:	80 83       	st	Z, r24
			DDRB |= (1<<PORTB3);
     656:	84 b1       	in	r24, 0x04	; 4
     658:	88 60       	ori	r24, 0x08	; 8
     65a:	84 b9       	out	0x04, r24	; 4
			OCR2A=num;
     65c:	60 93 b3 00 	sts	0x00B3, r22	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
     660:	08 95       	ret

00000662 <sort>:
			
		}
	}

	// function to sort an array
	int *sort(int arr[]) {
     662:	0f 93       	push	r16
     664:	1f 93       	push	r17
     666:	cf 93       	push	r28
     668:	df 93       	push	r29
		int temp;
		for (int i = 0; i < 6; i++) {
     66a:	c0 e0       	ldi	r28, 0x00	; 0
     66c:	d0 e0       	ldi	r29, 0x00	; 0
     66e:	21 c0       	rjmp	.+66     	; 0x6b2 <sort+0x50>
			for (int j = i + 1; j < 6; j++) {
     670:	8e 01       	movw	r16, r28
     672:	0f 5f       	subi	r16, 0xFF	; 255
     674:	1f 4f       	sbci	r17, 0xFF	; 255
     676:	98 01       	movw	r18, r16
     678:	18 c0       	rjmp	.+48     	; 0x6aa <sort+0x48>
				if (arr[i] > arr[j]) {
     67a:	de 01       	movw	r26, r28
     67c:	aa 0f       	add	r26, r26
     67e:	bb 1f       	adc	r27, r27
     680:	a8 0f       	add	r26, r24
     682:	b9 1f       	adc	r27, r25
     684:	4d 91       	ld	r20, X+
     686:	5c 91       	ld	r21, X
     688:	11 97       	sbiw	r26, 0x01	; 1
     68a:	f9 01       	movw	r30, r18
     68c:	ee 0f       	add	r30, r30
     68e:	ff 1f       	adc	r31, r31
     690:	e8 0f       	add	r30, r24
     692:	f9 1f       	adc	r31, r25
     694:	60 81       	ld	r22, Z
     696:	71 81       	ldd	r23, Z+1	; 0x01
     698:	64 17       	cp	r22, r20
     69a:	75 07       	cpc	r23, r21
     69c:	24 f4       	brge	.+8      	; 0x6a6 <sort+0x44>
					temp = arr[i];
					arr[i] = arr[j];
     69e:	6d 93       	st	X+, r22
     6a0:	7c 93       	st	X, r23
					arr[j] = temp;
     6a2:	51 83       	std	Z+1, r21	; 0x01
     6a4:	40 83       	st	Z, r20

	// function to sort an array
	int *sort(int arr[]) {
		int temp;
		for (int i = 0; i < 6; i++) {
			for (int j = i + 1; j < 6; j++) {
     6a6:	2f 5f       	subi	r18, 0xFF	; 255
     6a8:	3f 4f       	sbci	r19, 0xFF	; 255
     6aa:	26 30       	cpi	r18, 0x06	; 6
     6ac:	31 05       	cpc	r19, r1
     6ae:	2c f3       	brlt	.-54     	; 0x67a <sort+0x18>
	}

	// function to sort an array
	int *sort(int arr[]) {
		int temp;
		for (int i = 0; i < 6; i++) {
     6b0:	e8 01       	movw	r28, r16
     6b2:	c6 30       	cpi	r28, 0x06	; 6
     6b4:	d1 05       	cpc	r29, r1
     6b6:	e4 f2       	brlt	.-72     	; 0x670 <sort+0xe>
					arr[i] = arr[j];
					arr[j] = temp;
				}
			}
		}
	}
     6b8:	df 91       	pop	r29
     6ba:	cf 91       	pop	r28
     6bc:	1f 91       	pop	r17
     6be:	0f 91       	pop	r16
     6c0:	08 95       	ret

000006c2 <LinearInterpolation>:

	// Function to find a point using Linear Interpolation
	int LinearInterpolation(int y1, int y2, int x1, int x2, int x0) {
     6c2:	0f 93       	push	r16
     6c4:	1f 93       	push	r17
     6c6:	fc 01       	movw	r30, r24

		int y0 = (int)(((y2 - y1) * (x0 - x1) / (x2 - x1)) + y1);
     6c8:	68 1b       	sub	r22, r24
     6ca:	79 0b       	sbc	r23, r25
     6cc:	04 1b       	sub	r16, r20
     6ce:	15 0b       	sbc	r17, r21
     6d0:	60 9f       	mul	r22, r16
     6d2:	c0 01       	movw	r24, r0
     6d4:	61 9f       	mul	r22, r17
     6d6:	90 0d       	add	r25, r0
     6d8:	70 9f       	mul	r23, r16
     6da:	90 0d       	add	r25, r0
     6dc:	11 24       	eor	r1, r1
     6de:	b9 01       	movw	r22, r18
     6e0:	64 1b       	sub	r22, r20
     6e2:	75 0b       	sbc	r23, r21
     6e4:	0e 94 2a 07 	call	0xe54	; 0xe54 <__divmodhi4>
		return y0;
	}
     6e8:	cf 01       	movw	r24, r30
     6ea:	86 0f       	add	r24, r22
     6ec:	97 1f       	adc	r25, r23
     6ee:	1f 91       	pop	r17
     6f0:	0f 91       	pop	r16
     6f2:	08 95       	ret

000006f4 <indexOf>:

	int indexOf(int arr[], int size, int val) {
		for (int i = 0; i <= size; i++) {
     6f4:	20 e0       	ldi	r18, 0x00	; 0
     6f6:	30 e0       	ldi	r19, 0x00	; 0
     6f8:	10 c0       	rjmp	.+32     	; 0x71a <indexOf+0x26>
			if (val == arr[i]) {
     6fa:	f9 01       	movw	r30, r18
     6fc:	ee 0f       	add	r30, r30
     6fe:	ff 1f       	adc	r31, r31
     700:	e8 0f       	add	r30, r24
     702:	f9 1f       	adc	r31, r25
     704:	01 90       	ld	r0, Z+
     706:	f0 81       	ld	r31, Z
     708:	e0 2d       	mov	r30, r0
     70a:	e4 17       	cp	r30, r20
     70c:	f5 07       	cpc	r31, r21
     70e:	19 f4       	brne	.+6      	; 0x716 <indexOf+0x22>
				return i;
     710:	82 2f       	mov	r24, r18
     712:	93 2f       	mov	r25, r19
     714:	08 95       	ret
		int y0 = (int)(((y2 - y1) * (x0 - x1) / (x2 - x1)) + y1);
		return y0;
	}

	int indexOf(int arr[], int size, int val) {
		for (int i = 0; i <= size; i++) {
     716:	2f 5f       	subi	r18, 0xFF	; 255
     718:	3f 4f       	sbci	r19, 0xFF	; 255
     71a:	62 17       	cp	r22, r18
     71c:	73 07       	cpc	r23, r19
     71e:	6c f7       	brge	.-38     	; 0x6fa <indexOf+0x6>
			if (val == arr[i]) {
				return i;
			}

		}
	}
     720:	08 95       	ret

00000722 <inList>:
	// check a value whether it is a element of an array
	int inList(int val,int arr[],int size){
		for(int i=0;i<size;i++){
     722:	14 16       	cp	r1, r20
     724:	15 06       	cpc	r1, r21
     726:	4c f4       	brge	.+18     	; 0x73a <inList+0x18>
			if(val==arr[i]){
     728:	fb 01       	movw	r30, r22
     72a:	20 81       	ld	r18, Z
     72c:	31 81       	ldd	r19, Z+1	; 0x01
     72e:	28 17       	cp	r18, r24
     730:	39 07       	cpc	r19, r25
     732:	21 f0       	breq	.+8      	; 0x73c <inList+0x1a>
				return 1;
				
				}else{
				return 0;
     734:	80 e0       	ldi	r24, 0x00	; 0
     736:	90 e0       	ldi	r25, 0x00	; 0
     738:	08 95       	ret
			}
		}
	}
     73a:	08 95       	ret
	}
	// check a value whether it is a element of an array
	int inList(int val,int arr[],int size){
		for(int i=0;i<size;i++){
			if(val==arr[i]){
				return 1;
     73c:	81 e0       	ldi	r24, 0x01	; 1
     73e:	90 e0       	ldi	r25, 0x00	; 0
				
				}else{
				return 0;
			}
		}
	}
     740:	08 95       	ret

00000742 <bestApproximate>:

	// function to get the best approximated point
	int bestApproximate(int x[], int y[], int x0) {
     742:	6f 92       	push	r6
     744:	7f 92       	push	r7
     746:	8f 92       	push	r8
     748:	9f 92       	push	r9
     74a:	af 92       	push	r10
     74c:	bf 92       	push	r11
     74e:	cf 92       	push	r12
     750:	df 92       	push	r13
     752:	ef 92       	push	r14
     754:	ff 92       	push	r15
     756:	0f 93       	push	r16
     758:	1f 93       	push	r17
     75a:	cf 93       	push	r28
     75c:	df 93       	push	r29
     75e:	cd b7       	in	r28, 0x3d	; 61
     760:	de b7       	in	r29, 0x3e	; 62
     762:	2c 97       	sbiw	r28, 0x0c	; 12
     764:	0f b6       	in	r0, 0x3f	; 63
     766:	f8 94       	cli
     768:	de bf       	out	0x3e, r29	; 62
     76a:	0f be       	out	0x3f, r0	; 63
     76c:	cd bf       	out	0x3d, r28	; 61
     76e:	7c 01       	movw	r14, r24
     770:	5b 01       	movw	r10, r22
     772:	8a 01       	movw	r16, r20
		if(inList(x0,x,5)){
     774:	45 e0       	ldi	r20, 0x05	; 5
     776:	50 e0       	ldi	r21, 0x00	; 0
     778:	bc 01       	movw	r22, r24
     77a:	c8 01       	movw	r24, r16
     77c:	0e 94 91 03 	call	0x722	; 0x722 <inList>
     780:	89 2b       	or	r24, r25
     782:	b1 f4       	brne	.+44     	; 0x7b0 <bestApproximate+0x6e>
     784:	20 e0       	ldi	r18, 0x00	; 0
     786:	30 e0       	ldi	r19, 0x00	; 0
     788:	2b c0       	rjmp	.+86     	; 0x7e0 <bestApproximate+0x9e>
			for(int i=0;i<5;i++){
				
				if(x0==x[i]){
     78a:	9c 01       	movw	r18, r24
     78c:	22 0f       	add	r18, r18
     78e:	33 1f       	adc	r19, r19
     790:	f7 01       	movw	r30, r14
     792:	e2 0f       	add	r30, r18
     794:	f3 1f       	adc	r31, r19
     796:	40 81       	ld	r20, Z
     798:	51 81       	ldd	r21, Z+1	; 0x01
     79a:	04 17       	cp	r16, r20
     79c:	15 07       	cpc	r17, r21
     79e:	31 f4       	brne	.+12     	; 0x7ac <bestApproximate+0x6a>
					return y[i];
     7a0:	f5 01       	movw	r30, r10
     7a2:	e2 0f       	add	r30, r18
     7a4:	f3 1f       	adc	r31, r19
     7a6:	80 81       	ld	r24, Z
     7a8:	91 81       	ldd	r25, Z+1	; 0x01
     7aa:	5e c0       	rjmp	.+188    	; 0x868 <__DATA_REGION_LENGTH__+0x68>
	}

	// function to get the best approximated point
	int bestApproximate(int x[], int y[], int x0) {
		if(inList(x0,x,5)){
			for(int i=0;i<5;i++){
     7ac:	01 96       	adiw	r24, 0x01	; 1
     7ae:	02 c0       	rjmp	.+4      	; 0x7b4 <bestApproximate+0x72>
     7b0:	80 e0       	ldi	r24, 0x00	; 0
     7b2:	90 e0       	ldi	r25, 0x00	; 0
     7b4:	85 30       	cpi	r24, 0x05	; 5
     7b6:	91 05       	cpc	r25, r1
     7b8:	44 f3       	brlt	.-48     	; 0x78a <bestApproximate+0x48>
     7ba:	56 c0       	rjmp	.+172    	; 0x868 <__DATA_REGION_LENGTH__+0x68>
			}
		}
		else{
			int z[6];
			for (int i = 0; i < 5; i++) {
				z[i] = x[i];
     7bc:	c9 01       	movw	r24, r18
     7be:	88 0f       	add	r24, r24
     7c0:	99 1f       	adc	r25, r25
     7c2:	f7 01       	movw	r30, r14
     7c4:	e8 0f       	add	r30, r24
     7c6:	f9 1f       	adc	r31, r25
     7c8:	40 81       	ld	r20, Z
     7ca:	51 81       	ldd	r21, Z+1	; 0x01
     7cc:	e1 e0       	ldi	r30, 0x01	; 1
     7ce:	f0 e0       	ldi	r31, 0x00	; 0
     7d0:	ec 0f       	add	r30, r28
     7d2:	fd 1f       	adc	r31, r29
     7d4:	e8 0f       	add	r30, r24
     7d6:	f9 1f       	adc	r31, r25
     7d8:	51 83       	std	Z+1, r21	; 0x01
     7da:	40 83       	st	Z, r20
				}
			}
		}
		else{
			int z[6];
			for (int i = 0; i < 5; i++) {
     7dc:	2f 5f       	subi	r18, 0xFF	; 255
     7de:	3f 4f       	sbci	r19, 0xFF	; 255
     7e0:	25 30       	cpi	r18, 0x05	; 5
     7e2:	31 05       	cpc	r19, r1
     7e4:	5c f3       	brlt	.-42     	; 0x7bc <bestApproximate+0x7a>
				z[i] = x[i];
			}

			z[5] = x0;
     7e6:	1c 87       	std	Y+12, r17	; 0x0c
     7e8:	0b 87       	std	Y+11, r16	; 0x0b
			sort(z);
     7ea:	ce 01       	movw	r24, r28
     7ec:	01 96       	adiw	r24, 0x01	; 1
     7ee:	0e 94 31 03 	call	0x662	; 0x662 <sort>
			int q = indexOf(z, 6, x0);
     7f2:	a8 01       	movw	r20, r16
     7f4:	66 e0       	ldi	r22, 0x06	; 6
     7f6:	70 e0       	ldi	r23, 0x00	; 0
     7f8:	ce 01       	movw	r24, r28
     7fa:	01 96       	adiw	r24, 0x01	; 1
     7fc:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <indexOf>
			int x1 = z[q - 1];
     800:	fc 01       	movw	r30, r24
     802:	31 97       	sbiw	r30, 0x01	; 1
     804:	ee 0f       	add	r30, r30
     806:	ff 1f       	adc	r31, r31
     808:	21 e0       	ldi	r18, 0x01	; 1
     80a:	30 e0       	ldi	r19, 0x00	; 0
     80c:	2c 0f       	add	r18, r28
     80e:	3d 1f       	adc	r19, r29
     810:	e2 0f       	add	r30, r18
     812:	f3 1f       	adc	r31, r19
     814:	80 80       	ld	r8, Z
     816:	91 80       	ldd	r9, Z+1	; 0x01
			int x2 = z[q + 1];
     818:	fc 01       	movw	r30, r24
     81a:	31 96       	adiw	r30, 0x01	; 1
     81c:	ee 0f       	add	r30, r30
     81e:	ff 1f       	adc	r31, r31
     820:	e2 0f       	add	r30, r18
     822:	f3 1f       	adc	r31, r19
     824:	60 80       	ld	r6, Z
     826:	71 80       	ldd	r7, Z+1	; 0x01
			int y1_pos = indexOf(x, 5, x1);
     828:	a4 01       	movw	r20, r8
     82a:	65 e0       	ldi	r22, 0x05	; 5
     82c:	70 e0       	ldi	r23, 0x00	; 0
     82e:	c7 01       	movw	r24, r14
     830:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <indexOf>
     834:	6c 01       	movw	r12, r24
			int y2_pos = indexOf(x, 5, x2);
     836:	a3 01       	movw	r20, r6
     838:	65 e0       	ldi	r22, 0x05	; 5
     83a:	70 e0       	ldi	r23, 0x00	; 0
     83c:	c7 01       	movw	r24, r14
     83e:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <indexOf>
			int y1 = y[y1_pos];
     842:	cc 0c       	add	r12, r12
     844:	dd 1c       	adc	r13, r13
     846:	f5 01       	movw	r30, r10
     848:	ec 0d       	add	r30, r12
     84a:	fd 1d       	adc	r31, r13
			int y2 = y[y2_pos];
     84c:	88 0f       	add	r24, r24
     84e:	99 1f       	adc	r25, r25
     850:	d5 01       	movw	r26, r10
     852:	a8 0f       	add	r26, r24
     854:	b9 1f       	adc	r27, r25
     856:	6d 91       	ld	r22, X+
     858:	7c 91       	ld	r23, X
			int res = LinearInterpolation(y1, y2, x1, x2, x0);
     85a:	93 01       	movw	r18, r6
     85c:	a4 01       	movw	r20, r8
     85e:	80 81       	ld	r24, Z
     860:	91 81       	ldd	r25, Z+1	; 0x01
     862:	0e 94 61 03 	call	0x6c2	; 0x6c2 <LinearInterpolation>
     866:	00 c0       	rjmp	.+0      	; 0x868 <__DATA_REGION_LENGTH__+0x68>
			
			
			return res;
		}}
     868:	2c 96       	adiw	r28, 0x0c	; 12
     86a:	0f b6       	in	r0, 0x3f	; 63
     86c:	f8 94       	cli
     86e:	de bf       	out	0x3e, r29	; 62
     870:	0f be       	out	0x3f, r0	; 63
     872:	cd bf       	out	0x3d, r28	; 61
     874:	df 91       	pop	r29
     876:	cf 91       	pop	r28
     878:	1f 91       	pop	r17
     87a:	0f 91       	pop	r16
     87c:	ff 90       	pop	r15
     87e:	ef 90       	pop	r14
     880:	df 90       	pop	r13
     882:	cf 90       	pop	r12
     884:	bf 90       	pop	r11
     886:	af 90       	pop	r10
     888:	9f 90       	pop	r9
     88a:	8f 90       	pop	r8
     88c:	7f 90       	pop	r7
     88e:	6f 90       	pop	r6
     890:	08 95       	ret

00000892 <average>:
		// get the average of sensor readings
		int average(int list[]) {
			int sum = 0;
			for (int i = 0; i < sizeof(list); i++) {
     892:	20 e0       	ldi	r18, 0x00	; 0
     894:	30 e0       	ldi	r19, 0x00	; 0
			
			return res;
		}}
		// get the average of sensor readings
		int average(int list[]) {
			int sum = 0;
     896:	40 e0       	ldi	r20, 0x00	; 0
     898:	50 e0       	ldi	r21, 0x00	; 0
			for (int i = 0; i < sizeof(list); i++) {
     89a:	0b c0       	rjmp	.+22     	; 0x8b2 <average+0x20>
				sum += list[i];
     89c:	f9 01       	movw	r30, r18
     89e:	ee 0f       	add	r30, r30
     8a0:	ff 1f       	adc	r31, r31
     8a2:	e8 0f       	add	r30, r24
     8a4:	f9 1f       	adc	r31, r25
     8a6:	60 81       	ld	r22, Z
     8a8:	71 81       	ldd	r23, Z+1	; 0x01
     8aa:	46 0f       	add	r20, r22
     8ac:	57 1f       	adc	r21, r23
			return res;
		}}
		// get the average of sensor readings
		int average(int list[]) {
			int sum = 0;
			for (int i = 0; i < sizeof(list); i++) {
     8ae:	2f 5f       	subi	r18, 0xFF	; 255
     8b0:	3f 4f       	sbci	r19, 0xFF	; 255
     8b2:	22 30       	cpi	r18, 0x02	; 2
     8b4:	31 05       	cpc	r19, r1
     8b6:	90 f3       	brcs	.-28     	; 0x89c <average+0xa>
				sum += list[i];
			}
			return sum / sizeof(list);
		}//get the sensor reading
     8b8:	ca 01       	movw	r24, r20
     8ba:	96 95       	lsr	r25
     8bc:	87 95       	ror	r24
     8be:	08 95       	ret

000008c0 <get_reading>:
		int* get_reading(int pin) {
     8c0:	1f 93       	push	r17
     8c2:	cf 93       	push	r28
     8c4:	df 93       	push	r29
     8c6:	18 2f       	mov	r17, r24
			int list[10];
			for (int i = 0; i < 10; i++) {
     8c8:	c0 e0       	ldi	r28, 0x00	; 0
     8ca:	d0 e0       	ldi	r29, 0x00	; 0
     8cc:	08 c0       	rjmp	.+16     	; 0x8de <get_reading+0x1e>
				list[i] = adc_read(pin);
     8ce:	81 2f       	mov	r24, r17
     8d0:	0e 94 18 02 	call	0x430	; 0x430 <adc_read>
				delay(25);
     8d4:	89 e1       	ldi	r24, 0x19	; 25
     8d6:	90 e0       	ldi	r25, 0x00	; 0
     8d8:	0e 94 6e 00 	call	0xdc	; 0xdc <delay>
			}
			return sum / sizeof(list);
		}//get the sensor reading
		int* get_reading(int pin) {
			int list[10];
			for (int i = 0; i < 10; i++) {
     8dc:	21 96       	adiw	r28, 0x01	; 1
     8de:	ca 30       	cpi	r28, 0x0A	; 10
     8e0:	d1 05       	cpc	r29, r1
     8e2:	ac f3       	brlt	.-22     	; 0x8ce <get_reading+0xe>
				list[i] = adc_read(pin);
				delay(25);
			}
			return list;
		}
     8e4:	80 e0       	ldi	r24, 0x00	; 0
     8e6:	90 e0       	ldi	r25, 0x00	; 0
     8e8:	df 91       	pop	r29
     8ea:	cf 91       	pop	r28
     8ec:	1f 91       	pop	r17
     8ee:	08 95       	ret

000008f0 <main>:
		int main(void){
     8f0:	cf 93       	push	r28
     8f2:	df 93       	push	r29
     8f4:	cd b7       	in	r28, 0x3d	; 61
     8f6:	de b7       	in	r29, 0x3e	; 62
     8f8:	e3 97       	sbiw	r28, 0x33	; 51
     8fa:	0f b6       	in	r0, 0x3f	; 63
     8fc:	f8 94       	cli
     8fe:	de bf       	out	0x3e, r29	; 62
     900:	0f be       	out	0x3f, r0	; 63
     902:	cd bf       	out	0x3d, r28	; 61
			// initialize the i2c and lcd display
			i2c_init();
     904:	0e 94 53 00 	call	0xa6	; 0xa6 <i2c_init>
			i2c_start();
     908:	0e 94 5c 00 	call	0xb8	; 0xb8 <i2c_start>
			i2c_write(0x70);
     90c:	80 e7       	ldi	r24, 0x70	; 112
     90e:	0e 94 64 00 	call	0xc8	; 0xc8 <i2c_write>
			lcd_init();
     912:	0e 94 0e 01 	call	0x21c	; 0x21c <lcd_init>
			// display modes
			lcd_cmd(0x80); lcd_msg("mode 1");
     916:	80 e8       	ldi	r24, 0x80	; 128
     918:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_cmd>
     91c:	8f e3       	ldi	r24, 0x3F	; 63
     91e:	91 e0       	ldi	r25, 0x01	; 1
     920:	0e 94 71 01 	call	0x2e2	; 0x2e2 <lcd_msg>
			lcd_cmd(0x88); lcd_msg("mode 2");
     924:	88 e8       	ldi	r24, 0x88	; 136
     926:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_cmd>
     92a:	86 e4       	ldi	r24, 0x46	; 70
     92c:	91 e0       	ldi	r25, 0x01	; 1
     92e:	0e 94 71 01 	call	0x2e2	; 0x2e2 <lcd_msg>
			lcd_cmd(0xc5); lcd_msg("mode 3");
     932:	85 ec       	ldi	r24, 0xC5	; 197
     934:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_cmd>
     938:	8d e4       	ldi	r24, 0x4D	; 77
     93a:	91 e0       	ldi	r25, 0x01	; 1
     93c:	0e 94 71 01 	call	0x2e2	; 0x2e2 <lcd_msg>

			DDRC = 0b00000111;
     940:	87 e0       	ldi	r24, 0x07	; 7
     942:	87 b9       	out	0x07, r24	; 7

			adc_init();
     944:	0e 94 11 02 	call	0x422	; 0x422 <adc_init>

			while (1)

			{
				//mode selection
				char mode = keyfind();
     948:	0e 94 7e 01 	call	0x2fc	; 0x2fc <keyfind>
     94c:	b8 2e       	mov	r11, r24
				if (mode == '1') { //mode 1 - calibration mode
     94e:	21 e3       	ldi	r18, 0x31	; 49
     950:	82 13       	cpse	r24, r18
     952:	be c0       	rjmp	.+380    	; 0xad0 <__stack+0x1d1>
					RGB_off();
     954:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <RGB_off>
					// take the values of basic colors
					Red_b = displayWrite("Black", "R-");
     958:	64 e5       	ldi	r22, 0x54	; 84
     95a:	71 e0       	ldi	r23, 0x01	; 1
     95c:	87 e5       	ldi	r24, 0x57	; 87
     95e:	91 e0       	ldi	r25, 0x01	; 1
     960:	0e 94 b2 02 	call	0x564	; 0x564 <displayWrite>
     964:	90 93 e2 01 	sts	0x01E2, r25	; 0x8001e2 <Red_b+0x1>
     968:	80 93 e1 01 	sts	0x01E1, r24	; 0x8001e1 <Red_b>
					if (Red_b) {
     96c:	89 2b       	or	r24, r25
     96e:	09 f4       	brne	.+2      	; 0x972 <__stack+0x73>
     970:	af c0       	rjmp	.+350    	; 0xad0 <__stack+0x1d1>
						Green_b = displayWrite("Black", "G-");
     972:	6d e5       	ldi	r22, 0x5D	; 93
     974:	71 e0       	ldi	r23, 0x01	; 1
     976:	87 e5       	ldi	r24, 0x57	; 87
     978:	91 e0       	ldi	r25, 0x01	; 1
     97a:	0e 94 b2 02 	call	0x564	; 0x564 <displayWrite>
     97e:	80 93 e3 01 	sts	0x01E3, r24	; 0x8001e3 <Green_b>
						if (Green_b) {
     982:	88 23       	and	r24, r24
     984:	09 f4       	brne	.+2      	; 0x988 <__stack+0x89>
     986:	a4 c0       	rjmp	.+328    	; 0xad0 <__stack+0x1d1>
							Blue_b = displayWrite("Black", "B-");
     988:	60 e6       	ldi	r22, 0x60	; 96
     98a:	71 e0       	ldi	r23, 0x01	; 1
     98c:	87 e5       	ldi	r24, 0x57	; 87
     98e:	91 e0       	ldi	r25, 0x01	; 1
     990:	0e 94 b2 02 	call	0x564	; 0x564 <displayWrite>
     994:	80 93 d3 01 	sts	0x01D3, r24	; 0x8001d3 <Blue_b>
							if (Blue_b) {
     998:	88 23       	and	r24, r24
     99a:	09 f4       	brne	.+2      	; 0x99e <__stack+0x9f>
     99c:	99 c0       	rjmp	.+306    	; 0xad0 <__stack+0x1d1>
								Red_w = displayWrite("White", "R-");
     99e:	64 e5       	ldi	r22, 0x54	; 84
     9a0:	71 e0       	ldi	r23, 0x01	; 1
     9a2:	83 e6       	ldi	r24, 0x63	; 99
     9a4:	91 e0       	ldi	r25, 0x01	; 1
     9a6:	0e 94 b2 02 	call	0x564	; 0x564 <displayWrite>
     9aa:	80 93 e6 01 	sts	0x01E6, r24	; 0x8001e6 <Red_w>
								if (Red_w) {
     9ae:	88 23       	and	r24, r24
     9b0:	09 f4       	brne	.+2      	; 0x9b4 <__stack+0xb5>
     9b2:	8e c0       	rjmp	.+284    	; 0xad0 <__stack+0x1d1>
									Green_w = displayWrite("White", "G-");
     9b4:	6d e5       	ldi	r22, 0x5D	; 93
     9b6:	71 e0       	ldi	r23, 0x01	; 1
     9b8:	83 e6       	ldi	r24, 0x63	; 99
     9ba:	91 e0       	ldi	r25, 0x01	; 1
     9bc:	0e 94 b2 02 	call	0x564	; 0x564 <displayWrite>
     9c0:	80 93 e7 01 	sts	0x01E7, r24	; 0x8001e7 <Green_w>
									if (Green_w) {
     9c4:	88 23       	and	r24, r24
     9c6:	09 f4       	brne	.+2      	; 0x9ca <__stack+0xcb>
     9c8:	83 c0       	rjmp	.+262    	; 0xad0 <__stack+0x1d1>
										Blue_w = displayWrite("White", "B-");
     9ca:	60 e6       	ldi	r22, 0x60	; 96
     9cc:	71 e0       	ldi	r23, 0x01	; 1
     9ce:	83 e6       	ldi	r24, 0x63	; 99
     9d0:	91 e0       	ldi	r25, 0x01	; 1
     9d2:	0e 94 b2 02 	call	0x564	; 0x564 <displayWrite>
     9d6:	80 93 e8 01 	sts	0x01E8, r24	; 0x8001e8 <Blue_w>
										if (Blue_w) {
     9da:	88 23       	and	r24, r24
     9dc:	09 f4       	brne	.+2      	; 0x9e0 <__stack+0xe1>
     9de:	78 c0       	rjmp	.+240    	; 0xad0 <__stack+0x1d1>
											Red_r = displayWrite("RED","R-");
     9e0:	64 e5       	ldi	r22, 0x54	; 84
     9e2:	71 e0       	ldi	r23, 0x01	; 1
     9e4:	89 e6       	ldi	r24, 0x69	; 105
     9e6:	91 e0       	ldi	r25, 0x01	; 1
     9e8:	0e 94 b2 02 	call	0x564	; 0x564 <displayWrite>
     9ec:	80 93 df 01 	sts	0x01DF, r24	; 0x8001df <Red_r>
											if(Red_r){
     9f0:	88 23       	and	r24, r24
     9f2:	09 f4       	brne	.+2      	; 0x9f6 <__stack+0xf7>
     9f4:	6d c0       	rjmp	.+218    	; 0xad0 <__stack+0x1d1>
												Green_r=displayWrite("RED","G-");
     9f6:	6d e5       	ldi	r22, 0x5D	; 93
     9f8:	71 e0       	ldi	r23, 0x01	; 1
     9fa:	89 e6       	ldi	r24, 0x69	; 105
     9fc:	91 e0       	ldi	r25, 0x01	; 1
     9fe:	0e 94 b2 02 	call	0x564	; 0x564 <displayWrite>
     a02:	80 93 da 01 	sts	0x01DA, r24	; 0x8001da <Green_r>
												if (Green_r){
     a06:	88 23       	and	r24, r24
     a08:	09 f4       	brne	.+2      	; 0xa0c <__stack+0x10d>
     a0a:	62 c0       	rjmp	.+196    	; 0xad0 <__stack+0x1d1>
													Blue_r = displayWrite("RED", "B-");
     a0c:	60 e6       	ldi	r22, 0x60	; 96
     a0e:	71 e0       	ldi	r23, 0x01	; 1
     a10:	89 e6       	ldi	r24, 0x69	; 105
     a12:	91 e0       	ldi	r25, 0x01	; 1
     a14:	0e 94 b2 02 	call	0x564	; 0x564 <displayWrite>
     a18:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <Blue_r>
													if (Blue_r) {
     a1c:	88 23       	and	r24, r24
     a1e:	09 f4       	brne	.+2      	; 0xa22 <__stack+0x123>
     a20:	57 c0       	rjmp	.+174    	; 0xad0 <__stack+0x1d1>
														Red_g = displayWrite("Green", "R-");
     a22:	64 e5       	ldi	r22, 0x54	; 84
     a24:	71 e0       	ldi	r23, 0x01	; 1
     a26:	8d e6       	ldi	r24, 0x6D	; 109
     a28:	91 e0       	ldi	r25, 0x01	; 1
     a2a:	0e 94 b2 02 	call	0x564	; 0x564 <displayWrite>
     a2e:	80 93 e4 01 	sts	0x01E4, r24	; 0x8001e4 <Red_g>
														if (Red_g) {
     a32:	88 23       	and	r24, r24
     a34:	09 f4       	brne	.+2      	; 0xa38 <__stack+0x139>
     a36:	4c c0       	rjmp	.+152    	; 0xad0 <__stack+0x1d1>
															Green_g = displayWrite("Green", "G-");
     a38:	6d e5       	ldi	r22, 0x5D	; 93
     a3a:	71 e0       	ldi	r23, 0x01	; 1
     a3c:	8d e6       	ldi	r24, 0x6D	; 109
     a3e:	91 e0       	ldi	r25, 0x01	; 1
     a40:	0e 94 b2 02 	call	0x564	; 0x564 <displayWrite>
     a44:	80 93 d2 01 	sts	0x01D2, r24	; 0x8001d2 <Green_g>
															if (Green_g) {
     a48:	88 23       	and	r24, r24
     a4a:	09 f4       	brne	.+2      	; 0xa4e <__stack+0x14f>
     a4c:	41 c0       	rjmp	.+130    	; 0xad0 <__stack+0x1d1>
																Blue_g = displayWrite("Green", "B-");
     a4e:	60 e6       	ldi	r22, 0x60	; 96
     a50:	71 e0       	ldi	r23, 0x01	; 1
     a52:	8d e6       	ldi	r24, 0x6D	; 109
     a54:	91 e0       	ldi	r25, 0x01	; 1
     a56:	0e 94 b2 02 	call	0x564	; 0x564 <displayWrite>
     a5a:	80 93 e5 01 	sts	0x01E5, r24	; 0x8001e5 <Blue_g>
																if (Blue_g) {
     a5e:	88 23       	and	r24, r24
     a60:	b9 f1       	breq	.+110    	; 0xad0 <__stack+0x1d1>
																	Red_blue = displayWrite("Blue", "R-");
     a62:	64 e5       	ldi	r22, 0x54	; 84
     a64:	71 e0       	ldi	r23, 0x01	; 1
     a66:	83 e7       	ldi	r24, 0x73	; 115
     a68:	91 e0       	ldi	r25, 0x01	; 1
     a6a:	0e 94 b2 02 	call	0x564	; 0x564 <displayWrite>
     a6e:	80 93 d1 01 	sts	0x01D1, r24	; 0x8001d1 <Red_blue>
																	if (Red_blue) {
     a72:	88 23       	and	r24, r24
     a74:	69 f1       	breq	.+90     	; 0xad0 <__stack+0x1d1>
																		Green_blue = displayWrite("Blue", "G-");
     a76:	6d e5       	ldi	r22, 0x5D	; 93
     a78:	71 e0       	ldi	r23, 0x01	; 1
     a7a:	83 e7       	ldi	r24, 0x73	; 115
     a7c:	91 e0       	ldi	r25, 0x01	; 1
     a7e:	0e 94 b2 02 	call	0x564	; 0x564 <displayWrite>
     a82:	80 93 dd 01 	sts	0x01DD, r24	; 0x8001dd <Green_blue>
																		if (Green_blue) {
     a86:	88 23       	and	r24, r24
     a88:	19 f1       	breq	.+70     	; 0xad0 <__stack+0x1d1>
																			Blue_blue = displayWrite("Blue", "B-");
     a8a:	60 e6       	ldi	r22, 0x60	; 96
     a8c:	71 e0       	ldi	r23, 0x01	; 1
     a8e:	83 e7       	ldi	r24, 0x73	; 115
     a90:	91 e0       	ldi	r25, 0x01	; 1
     a92:	0e 94 b2 02 	call	0x564	; 0x564 <displayWrite>
     a96:	80 93 e0 01 	sts	0x01E0, r24	; 0x8001e0 <Blue_blue>
																			_Bool flag = false;
																			_Bool calibrated = true;
																			lcd_init();
     a9a:	0e 94 0e 01 	call	0x21c	; 0x21c <lcd_init>
																			lcd_cmd(0x82);
     a9e:	82 e8       	ldi	r24, 0x82	; 130
     aa0:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_cmd>
																			lcd_msg("Calibration");
     aa4:	88 e7       	ldi	r24, 0x78	; 120
     aa6:	91 e0       	ldi	r25, 0x01	; 1
     aa8:	0e 94 71 01 	call	0x2e2	; 0x2e2 <lcd_msg>
																			lcd_cmd(0xC6);
     aac:	86 ec       	ldi	r24, 0xC6	; 198
     aae:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_cmd>
																			lcd_msg("Done!");
     ab2:	84 e8       	ldi	r24, 0x84	; 132
     ab4:	91 e0       	ldi	r25, 0x01	; 1
     ab6:	0e 94 71 01 	call	0x2e2	; 0x2e2 <lcd_msg>
     aba:	8f ef       	ldi	r24, 0xFF	; 255
     abc:	93 ed       	ldi	r25, 0xD3	; 211
     abe:	20 e3       	ldi	r18, 0x30	; 48
     ac0:	81 50       	subi	r24, 0x01	; 1
     ac2:	90 40       	sbci	r25, 0x00	; 0
     ac4:	20 40       	sbci	r18, 0x00	; 0
     ac6:	e1 f7       	brne	.-8      	; 0xac0 <__stack+0x1c1>
     ac8:	00 c0       	rjmp	.+0      	; 0xaca <__stack+0x1cb>
     aca:	00 00       	nop
																			_delay_ms(1000);
																			main();
     acc:	0e 94 78 04 	call	0x8f0	; 0x8f0 <main>
						}
					}


				}
				if (mode == '2') { //mode 2 - sensoring mode
     ad0:	82 e3       	ldi	r24, 0x32	; 50
     ad2:	b8 12       	cpse	r11, r24
     ad4:	3f c1       	rjmp	.+638    	; 0xd54 <__stack+0x455>
					RGB_off();
     ad6:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <RGB_off>
					lcd_init();
     ada:	0e 94 0e 01 	call	0x21c	; 0x21c <lcd_init>
					_Bool finish = false;
					while (! finish) {
     ade:	20 c1       	rjmp	.+576    	; 0xd20 <__stack+0x421>
						int bl_avg_nw,rd_avg_nw,gr_avg_nw;
						PORTC ^= (1 << Red); _delay_ms(500); int rd_avg = average(get_reading(pin));
						if (calibrated) {
							int Red_y[] = {0,255,235,70,50};
     ae0:	8a e0       	ldi	r24, 0x0A	; 10
     ae2:	e1 e1       	ldi	r30, 0x11	; 17
     ae4:	f1 e0       	ldi	r31, 0x01	; 1
     ae6:	de 01       	movw	r26, r28
     ae8:	52 96       	adiw	r26, 0x12	; 18
     aea:	01 90       	ld	r0, Z+
     aec:	0d 92       	st	X+, r0
     aee:	8a 95       	dec	r24
     af0:	e1 f7       	brne	.-8      	; 0xaea <__stack+0x1eb>
							int Red_x[] = {strtol(Red_b), strtol(Red_w), strtol(Red_r), strtol(Red_g), strtol(Red_blue)};
     af2:	80 91 e1 01 	lds	r24, 0x01E1	; 0x8001e1 <Red_b>
     af6:	90 91 e2 01 	lds	r25, 0x01E2	; 0x8001e2 <Red_b+0x1>
     afa:	0e 94 52 07 	call	0xea4	; 0xea4 <strtol>
     afe:	9a 83       	std	Y+2, r25	; 0x02
     b00:	89 83       	std	Y+1, r24	; 0x01
     b02:	80 91 e6 01 	lds	r24, 0x01E6	; 0x8001e6 <Red_w>
     b06:	90 e0       	ldi	r25, 0x00	; 0
     b08:	0e 94 52 07 	call	0xea4	; 0xea4 <strtol>
     b0c:	9c 83       	std	Y+4, r25	; 0x04
     b0e:	8b 83       	std	Y+3, r24	; 0x03
     b10:	80 91 df 01 	lds	r24, 0x01DF	; 0x8001df <Red_r>
     b14:	90 e0       	ldi	r25, 0x00	; 0
     b16:	0e 94 52 07 	call	0xea4	; 0xea4 <strtol>
     b1a:	9e 83       	std	Y+6, r25	; 0x06
     b1c:	8d 83       	std	Y+5, r24	; 0x05
     b1e:	80 91 e4 01 	lds	r24, 0x01E4	; 0x8001e4 <Red_g>
     b22:	90 e0       	ldi	r25, 0x00	; 0
     b24:	0e 94 52 07 	call	0xea4	; 0xea4 <strtol>
     b28:	98 87       	std	Y+8, r25	; 0x08
     b2a:	8f 83       	std	Y+7, r24	; 0x07
     b2c:	80 91 d1 01 	lds	r24, 0x01D1	; 0x8001d1 <Red_blue>
     b30:	90 e0       	ldi	r25, 0x00	; 0
     b32:	0e 94 52 07 	call	0xea4	; 0xea4 <strtol>
     b36:	9a 87       	std	Y+10, r25	; 0x0a
     b38:	89 87       	std	Y+9, r24	; 0x09
							int n = sizeof(Red_x) / sizeof(Red_x[0]);
							rd_avg_nw = bestApproximate(Red_x, Red_y, rd_avg);// final RED value
     b3a:	a5 01       	movw	r20, r10
     b3c:	be 01       	movw	r22, r28
     b3e:	6e 5e       	subi	r22, 0xEE	; 238
     b40:	7f 4f       	sbci	r23, 0xFF	; 255
     b42:	ce 01       	movw	r24, r28
     b44:	01 96       	adiw	r24, 0x01	; 1
     b46:	0e 94 a1 03 	call	0x742	; 0x742 <bestApproximate>
     b4a:	8c 01       	movw	r16, r24
							
						}
						
						
						
						PORTC ^= (1 << Red); //light up red bulb
     b4c:	98 b1       	in	r25, 0x08	; 8
     b4e:	81 e0       	ldi	r24, 0x01	; 1
     b50:	89 27       	eor	r24, r25
     b52:	88 b9       	out	0x08, r24	; 8
						PORTC ^= (1 << Green); _delay_ms(500); int gr_avg = average(get_reading(pin));
     b54:	98 b1       	in	r25, 0x08	; 8
     b56:	82 e0       	ldi	r24, 0x02	; 2
     b58:	89 27       	eor	r24, r25
     b5a:	88 b9       	out	0x08, r24	; 8
     b5c:	9f ef       	ldi	r25, 0xFF	; 255
     b5e:	29 e6       	ldi	r18, 0x69	; 105
     b60:	88 e1       	ldi	r24, 0x18	; 24
     b62:	91 50       	subi	r25, 0x01	; 1
     b64:	20 40       	sbci	r18, 0x00	; 0
     b66:	80 40       	sbci	r24, 0x00	; 0
     b68:	e1 f7       	brne	.-8      	; 0xb62 <__stack+0x263>
     b6a:	00 c0       	rjmp	.+0      	; 0xb6c <__stack+0x26d>
     b6c:	00 00       	nop
     b6e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     b72:	90 e0       	ldi	r25, 0x00	; 0
     b74:	0e 94 60 04 	call	0x8c0	; 0x8c0 <get_reading>
     b78:	0e 94 49 04 	call	0x892	; 0x892 <average>
     b7c:	5c 01       	movw	r10, r24
						if (calibrated) {
     b7e:	80 91 d0 01 	lds	r24, 0x01D0	; 0x8001d0 <__data_end>
     b82:	88 23       	and	r24, r24
     b84:	a9 f1       	breq	.+106    	; 0xbf0 <__stack+0x2f1>
							int Green_y[] = {0,255,9,186,150};
     b86:	8a e0       	ldi	r24, 0x0A	; 10
     b88:	eb e1       	ldi	r30, 0x1B	; 27
     b8a:	f1 e0       	ldi	r31, 0x01	; 1
     b8c:	de 01       	movw	r26, r28
     b8e:	52 96       	adiw	r26, 0x12	; 18
     b90:	01 90       	ld	r0, Z+
     b92:	0d 92       	st	X+, r0
     b94:	8a 95       	dec	r24
     b96:	e1 f7       	brne	.-8      	; 0xb90 <__stack+0x291>
							int Green_x[] = {strtol(Green_b), strtol(Green_w), strtol(Green_r), strtol(Green_g), strtol(Green_blue)};
     b98:	80 91 e3 01 	lds	r24, 0x01E3	; 0x8001e3 <Green_b>
     b9c:	90 e0       	ldi	r25, 0x00	; 0
     b9e:	0e 94 52 07 	call	0xea4	; 0xea4 <strtol>
     ba2:	9a 83       	std	Y+2, r25	; 0x02
     ba4:	89 83       	std	Y+1, r24	; 0x01
     ba6:	80 91 e7 01 	lds	r24, 0x01E7	; 0x8001e7 <Green_w>
     baa:	90 e0       	ldi	r25, 0x00	; 0
     bac:	0e 94 52 07 	call	0xea4	; 0xea4 <strtol>
     bb0:	9c 83       	std	Y+4, r25	; 0x04
     bb2:	8b 83       	std	Y+3, r24	; 0x03
     bb4:	80 91 da 01 	lds	r24, 0x01DA	; 0x8001da <Green_r>
     bb8:	90 e0       	ldi	r25, 0x00	; 0
     bba:	0e 94 52 07 	call	0xea4	; 0xea4 <strtol>
     bbe:	9e 83       	std	Y+6, r25	; 0x06
     bc0:	8d 83       	std	Y+5, r24	; 0x05
     bc2:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <Green_g>
     bc6:	90 e0       	ldi	r25, 0x00	; 0
     bc8:	0e 94 52 07 	call	0xea4	; 0xea4 <strtol>
     bcc:	98 87       	std	Y+8, r25	; 0x08
     bce:	8f 83       	std	Y+7, r24	; 0x07
     bd0:	80 91 dd 01 	lds	r24, 0x01DD	; 0x8001dd <Green_blue>
     bd4:	90 e0       	ldi	r25, 0x00	; 0
     bd6:	0e 94 52 07 	call	0xea4	; 0xea4 <strtol>
     bda:	9a 87       	std	Y+10, r25	; 0x0a
     bdc:	89 87       	std	Y+9, r24	; 0x09
							int n = sizeof(Green_x) / sizeof(Green_x[0]);
							gr_avg_nw= bestApproximate(Green_x, Green_y,gr_avg);//Final Green value
     bde:	a5 01       	movw	r20, r10
     be0:	be 01       	movw	r22, r28
     be2:	6e 5e       	subi	r22, 0xEE	; 238
     be4:	7f 4f       	sbci	r23, 0xFF	; 255
     be6:	ce 01       	movw	r24, r28
     be8:	01 96       	adiw	r24, 0x01	; 1
     bea:	0e 94 a1 03 	call	0x742	; 0x742 <bestApproximate>
     bee:	6c 01       	movw	r12, r24
							
							
							
							
						}
						PORTC ^= (1 << Green); //light up green bulb
     bf0:	98 b1       	in	r25, 0x08	; 8
     bf2:	82 e0       	ldi	r24, 0x02	; 2
     bf4:	89 27       	eor	r24, r25
     bf6:	88 b9       	out	0x08, r24	; 8
						PORTC ^= (1 << Blue); _delay_ms(500); int bl_avg  = average(get_reading(pin));
     bf8:	98 b1       	in	r25, 0x08	; 8
     bfa:	84 e0       	ldi	r24, 0x04	; 4
     bfc:	89 27       	eor	r24, r25
     bfe:	88 b9       	out	0x08, r24	; 8
     c00:	9f ef       	ldi	r25, 0xFF	; 255
     c02:	29 e6       	ldi	r18, 0x69	; 105
     c04:	88 e1       	ldi	r24, 0x18	; 24
     c06:	91 50       	subi	r25, 0x01	; 1
     c08:	20 40       	sbci	r18, 0x00	; 0
     c0a:	80 40       	sbci	r24, 0x00	; 0
     c0c:	e1 f7       	brne	.-8      	; 0xc06 <__stack+0x307>
     c0e:	00 c0       	rjmp	.+0      	; 0xc10 <__stack+0x311>
     c10:	00 00       	nop
     c12:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     c16:	90 e0       	ldi	r25, 0x00	; 0
     c18:	0e 94 60 04 	call	0x8c0	; 0x8c0 <get_reading>
     c1c:	0e 94 49 04 	call	0x892	; 0x892 <average>
     c20:	5c 01       	movw	r10, r24
						if (calibrated) {
     c22:	80 91 d0 01 	lds	r24, 0x01D0	; 0x8001d0 <__data_end>
     c26:	88 23       	and	r24, r24
     c28:	a9 f1       	breq	.+106    	; 0xc94 <__stack+0x395>
							int Blue_y[] = {0,255,9,40,232};
     c2a:	8a e0       	ldi	r24, 0x0A	; 10
     c2c:	e5 e2       	ldi	r30, 0x25	; 37
     c2e:	f1 e0       	ldi	r31, 0x01	; 1
     c30:	de 01       	movw	r26, r28
     c32:	52 96       	adiw	r26, 0x12	; 18
     c34:	01 90       	ld	r0, Z+
     c36:	0d 92       	st	X+, r0
     c38:	8a 95       	dec	r24
     c3a:	e1 f7       	brne	.-8      	; 0xc34 <__stack+0x335>
							int Blue_x[] = {strtol(Blue_b), strtol(Blue_w), strtol(Blue_r), strtol(Blue_g), strtol(Blue_blue)};
     c3c:	80 91 d3 01 	lds	r24, 0x01D3	; 0x8001d3 <Blue_b>
     c40:	90 e0       	ldi	r25, 0x00	; 0
     c42:	0e 94 52 07 	call	0xea4	; 0xea4 <strtol>
     c46:	9a 83       	std	Y+2, r25	; 0x02
     c48:	89 83       	std	Y+1, r24	; 0x01
     c4a:	80 91 e8 01 	lds	r24, 0x01E8	; 0x8001e8 <Blue_w>
     c4e:	90 e0       	ldi	r25, 0x00	; 0
     c50:	0e 94 52 07 	call	0xea4	; 0xea4 <strtol>
     c54:	9c 83       	std	Y+4, r25	; 0x04
     c56:	8b 83       	std	Y+3, r24	; 0x03
     c58:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <Blue_r>
     c5c:	90 e0       	ldi	r25, 0x00	; 0
     c5e:	0e 94 52 07 	call	0xea4	; 0xea4 <strtol>
     c62:	9e 83       	std	Y+6, r25	; 0x06
     c64:	8d 83       	std	Y+5, r24	; 0x05
     c66:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <Blue_g>
     c6a:	90 e0       	ldi	r25, 0x00	; 0
     c6c:	0e 94 52 07 	call	0xea4	; 0xea4 <strtol>
     c70:	98 87       	std	Y+8, r25	; 0x08
     c72:	8f 83       	std	Y+7, r24	; 0x07
     c74:	80 91 e0 01 	lds	r24, 0x01E0	; 0x8001e0 <Blue_blue>
     c78:	90 e0       	ldi	r25, 0x00	; 0
     c7a:	0e 94 52 07 	call	0xea4	; 0xea4 <strtol>
     c7e:	9a 87       	std	Y+10, r25	; 0x0a
     c80:	89 87       	std	Y+9, r24	; 0x09
							int n = sizeof(Blue_x) / sizeof(Blue_x[0]);
							bl_avg_nw = bestApproximate(Blue_x, Blue_y,bl_avg);// final blue value
     c82:	a5 01       	movw	r20, r10
     c84:	be 01       	movw	r22, r28
     c86:	6e 5e       	subi	r22, 0xEE	; 238
     c88:	7f 4f       	sbci	r23, 0xFF	; 255
     c8a:	ce 01       	movw	r24, r28
     c8c:	01 96       	adiw	r24, 0x01	; 1
     c8e:	0e 94 a1 03 	call	0x742	; 0x742 <bestApproximate>
     c92:	7c 01       	movw	r14, r24
							
						}
						PORTC ^= (1 << Blue);   //light up blue bulb
     c94:	98 b1       	in	r25, 0x08	; 8
     c96:	84 e0       	ldi	r24, 0x04	; 4
     c98:	89 27       	eor	r24, r25
     c9a:	88 b9       	out	0x08, r24	; 8
						// convert uint16 to string
						char str_red [sizeof(rd_avg_nw) * 8 + 1];
						char str_green [sizeof(gr_avg_nw) * 8 + 1];
						char str_Blue [sizeof(bl_avg_nw) * 8 + 1];

						lcd_cmd(0x80);
     c9c:	80 e8       	ldi	r24, 0x80	; 128
     c9e:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_cmd>
						utoa(rd_avg_nw, str_red, 10);
     ca2:	4a e0       	ldi	r20, 0x0A	; 10
     ca4:	50 e0       	ldi	r21, 0x00	; 0
     ca6:	be 01       	movw	r22, r28
     ca8:	6d 5d       	subi	r22, 0xDD	; 221
     caa:	7f 4f       	sbci	r23, 0xFF	; 255
     cac:	c8 01       	movw	r24, r16
     cae:	0e 94 71 08 	call	0x10e2	; 0x10e2 <utoa>
						lcd_msg("R:"); lcd_cmd(0x83); lcd_msg(str_red);
     cb2:	8a e8       	ldi	r24, 0x8A	; 138
     cb4:	91 e0       	ldi	r25, 0x01	; 1
     cb6:	0e 94 71 01 	call	0x2e2	; 0x2e2 <lcd_msg>
     cba:	83 e8       	ldi	r24, 0x83	; 131
     cbc:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_cmd>
     cc0:	ce 01       	movw	r24, r28
     cc2:	83 96       	adiw	r24, 0x23	; 35
     cc4:	0e 94 71 01 	call	0x2e2	; 0x2e2 <lcd_msg>
						utoa(gr_avg_nw, str_green, 10);
     cc8:	4a e0       	ldi	r20, 0x0A	; 10
     cca:	50 e0       	ldi	r21, 0x00	; 0
     ccc:	be 01       	movw	r22, r28
     cce:	6e 5e       	subi	r22, 0xEE	; 238
     cd0:	7f 4f       	sbci	r23, 0xFF	; 255
     cd2:	c6 01       	movw	r24, r12
     cd4:	0e 94 71 08 	call	0x10e2	; 0x10e2 <utoa>
						lcd_cmd(0x88); lcd_msg("G:"); lcd_cmd(0x8B); lcd_msg(str_green);
     cd8:	88 e8       	ldi	r24, 0x88	; 136
     cda:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_cmd>
     cde:	8d e8       	ldi	r24, 0x8D	; 141
     ce0:	91 e0       	ldi	r25, 0x01	; 1
     ce2:	0e 94 71 01 	call	0x2e2	; 0x2e2 <lcd_msg>
     ce6:	8b e8       	ldi	r24, 0x8B	; 139
     ce8:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_cmd>
     cec:	ce 01       	movw	r24, r28
     cee:	42 96       	adiw	r24, 0x12	; 18
     cf0:	0e 94 71 01 	call	0x2e2	; 0x2e2 <lcd_msg>
						utoa(bl_avg_nw, str_Blue, 10);
     cf4:	4a e0       	ldi	r20, 0x0A	; 10
     cf6:	50 e0       	ldi	r21, 0x00	; 0
     cf8:	be 01       	movw	r22, r28
     cfa:	6f 5f       	subi	r22, 0xFF	; 255
     cfc:	7f 4f       	sbci	r23, 0xFF	; 255
     cfe:	c7 01       	movw	r24, r14
     d00:	0e 94 71 08 	call	0x10e2	; 0x10e2 <utoa>
						lcd_cmd(0xC6); lcd_msg("B:"); lcd_cmd(0xCA); lcd_msg(str_Blue);
     d04:	86 ec       	ldi	r24, 0xC6	; 198
     d06:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_cmd>
     d0a:	80 e9       	ldi	r24, 0x90	; 144
     d0c:	91 e0       	ldi	r25, 0x01	; 1
     d0e:	0e 94 71 01 	call	0x2e2	; 0x2e2 <lcd_msg>
     d12:	8a ec       	ldi	r24, 0xCA	; 202
     d14:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_cmd>
     d18:	ce 01       	movw	r24, r28
     d1a:	01 96       	adiw	r24, 0x01	; 1
     d1c:	0e 94 71 01 	call	0x2e2	; 0x2e2 <lcd_msg>
					RGB_off();
					lcd_init();
					_Bool finish = false;
					while (! finish) {
						int bl_avg_nw,rd_avg_nw,gr_avg_nw;
						PORTC ^= (1 << Red); _delay_ms(500); int rd_avg = average(get_reading(pin));
     d20:	98 b1       	in	r25, 0x08	; 8
     d22:	81 e0       	ldi	r24, 0x01	; 1
     d24:	89 27       	eor	r24, r25
     d26:	88 b9       	out	0x08, r24	; 8
     d28:	9f ef       	ldi	r25, 0xFF	; 255
     d2a:	29 e6       	ldi	r18, 0x69	; 105
     d2c:	88 e1       	ldi	r24, 0x18	; 24
     d2e:	91 50       	subi	r25, 0x01	; 1
     d30:	20 40       	sbci	r18, 0x00	; 0
     d32:	80 40       	sbci	r24, 0x00	; 0
     d34:	e1 f7       	brne	.-8      	; 0xd2e <__stack+0x42f>
     d36:	00 c0       	rjmp	.+0      	; 0xd38 <__stack+0x439>
     d38:	00 00       	nop
     d3a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     d3e:	90 e0       	ldi	r25, 0x00	; 0
     d40:	0e 94 60 04 	call	0x8c0	; 0x8c0 <get_reading>
     d44:	0e 94 49 04 	call	0x892	; 0x892 <average>
     d48:	5c 01       	movw	r10, r24
						if (calibrated) {
     d4a:	80 91 d0 01 	lds	r24, 0x01D0	; 0x8001d0 <__data_end>
     d4e:	81 11       	cpse	r24, r1
     d50:	c7 ce       	rjmp	.-626    	; 0xae0 <__stack+0x1e1>
     d52:	fc ce       	rjmp	.-520    	; 0xb4c <__stack+0x24d>
						lcd_cmd(0x88); lcd_msg("G:"); lcd_cmd(0x8B); lcd_msg(str_green);
						utoa(bl_avg_nw, str_Blue, 10);
						lcd_cmd(0xC6); lcd_msg("B:"); lcd_cmd(0xCA); lcd_msg(str_Blue);
					}
				}
				if (mode == '3') { //mode 3 - light up RGB led for given R,G,B values
     d54:	93 e3       	ldi	r25, 0x33	; 51
     d56:	b9 12       	cpse	r11, r25
     d58:	f7 cd       	rjmp	.-1042   	; 0x948 <__stack+0x49>
					RGB_off();
     d5a:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <RGB_off>
					lcd_init();
     d5e:	0e 94 0e 01 	call	0x21c	; 0x21c <lcd_init>
					lcd_cmd(0x80);
     d62:	80 e8       	ldi	r24, 0x80	; 128
     d64:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_cmd>
					lcd_msg("mode 3 selected");
     d68:	83 e9       	ldi	r24, 0x93	; 147
     d6a:	91 e0       	ldi	r25, 0x01	; 1
     d6c:	0e 94 71 01 	call	0x2e2	; 0x2e2 <lcd_msg>
     d70:	2f ef       	ldi	r18, 0xFF	; 255
     d72:	83 ec       	ldi	r24, 0xC3	; 195
     d74:	99 e0       	ldi	r25, 0x09	; 9
     d76:	21 50       	subi	r18, 0x01	; 1
     d78:	80 40       	sbci	r24, 0x00	; 0
     d7a:	90 40       	sbci	r25, 0x00	; 0
     d7c:	e1 f7       	brne	.-8      	; 0xd76 <__stack+0x477>
     d7e:	00 c0       	rjmp	.+0      	; 0xd80 <__stack+0x481>
     d80:	00 00       	nop
					_delay_ms(200);
					lcd_init();
     d82:	0e 94 0e 01 	call	0x21c	; 0x21c <lcd_init>
					lcd_cmd(0x80);
     d86:	80 e8       	ldi	r24, 0x80	; 128
     d88:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_cmd>
					lcd_msg("Enter RED value");
     d8c:	83 ea       	ldi	r24, 0xA3	; 163
     d8e:	91 e0       	ldi	r25, 0x01	; 1
     d90:	0e 94 71 01 	call	0x2e2	; 0x2e2 <lcd_msg>
					int Red_Val= get_3_int_digits();
     d94:	0e 94 65 02 	call	0x4ca	; 0x4ca <get_3_int_digits>
     d98:	6c 01       	movw	r12, r24
     d9a:	2f ef       	ldi	r18, 0xFF	; 255
     d9c:	81 ee       	ldi	r24, 0xE1	; 225
     d9e:	94 e0       	ldi	r25, 0x04	; 4
     da0:	21 50       	subi	r18, 0x01	; 1
     da2:	80 40       	sbci	r24, 0x00	; 0
     da4:	90 40       	sbci	r25, 0x00	; 0
     da6:	e1 f7       	brne	.-8      	; 0xda0 <__stack+0x4a1>
     da8:	00 c0       	rjmp	.+0      	; 0xdaa <__stack+0x4ab>
     daa:	00 00       	nop
					_delay_ms(100);
					lcd_init();
     dac:	0e 94 0e 01 	call	0x21c	; 0x21c <lcd_init>
					lcd_cmd(0x80);
     db0:	80 e8       	ldi	r24, 0x80	; 128
     db2:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_cmd>
					lcd_msg("Enter GREEN");
     db6:	83 eb       	ldi	r24, 0xB3	; 179
     db8:	91 e0       	ldi	r25, 0x01	; 1
     dba:	0e 94 71 01 	call	0x2e2	; 0x2e2 <lcd_msg>
					lcd_cmd(0xC0);
     dbe:	80 ec       	ldi	r24, 0xC0	; 192
     dc0:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_cmd>
					lcd_msg("value");
     dc4:	8d ea       	ldi	r24, 0xAD	; 173
     dc6:	91 e0       	ldi	r25, 0x01	; 1
     dc8:	0e 94 71 01 	call	0x2e2	; 0x2e2 <lcd_msg>
					int Green_Val=get_3_int_digits();
     dcc:	0e 94 65 02 	call	0x4ca	; 0x4ca <get_3_int_digits>
     dd0:	7c 01       	movw	r14, r24
     dd2:	2f ef       	ldi	r18, 0xFF	; 255
     dd4:	81 ee       	ldi	r24, 0xE1	; 225
     dd6:	94 e0       	ldi	r25, 0x04	; 4
     dd8:	21 50       	subi	r18, 0x01	; 1
     dda:	80 40       	sbci	r24, 0x00	; 0
     ddc:	90 40       	sbci	r25, 0x00	; 0
     dde:	e1 f7       	brne	.-8      	; 0xdd8 <__stack+0x4d9>
     de0:	00 c0       	rjmp	.+0      	; 0xde2 <__stack+0x4e3>
     de2:	00 00       	nop
					_delay_ms(100);
					lcd_init();
     de4:	0e 94 0e 01 	call	0x21c	; 0x21c <lcd_init>
					lcd_cmd(0x80);
     de8:	80 e8       	ldi	r24, 0x80	; 128
     dea:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_cmd>
					lcd_msg("Enter BLUE value");
     dee:	8f eb       	ldi	r24, 0xBF	; 191
     df0:	91 e0       	ldi	r25, 0x01	; 1
     df2:	0e 94 71 01 	call	0x2e2	; 0x2e2 <lcd_msg>
					int Blue_Val= get_3_int_digits();
     df6:	0e 94 65 02 	call	0x4ca	; 0x4ca <get_3_int_digits>
     dfa:	8c 01       	movw	r16, r24
					pwm(0,Red_Val);
     dfc:	b6 01       	movw	r22, r12
     dfe:	80 e0       	ldi	r24, 0x00	; 0
     e00:	90 e0       	ldi	r25, 0x00	; 0
     e02:	0e 94 f5 02 	call	0x5ea	; 0x5ea <pwm>
					pwm(1,Green_Val);
     e06:	b7 01       	movw	r22, r14
     e08:	81 e0       	ldi	r24, 0x01	; 1
     e0a:	90 e0       	ldi	r25, 0x00	; 0
     e0c:	0e 94 f5 02 	call	0x5ea	; 0x5ea <pwm>
					pwm(2,Blue_Val);
     e10:	b8 01       	movw	r22, r16
     e12:	82 e0       	ldi	r24, 0x02	; 2
     e14:	90 e0       	ldi	r25, 0x00	; 0
     e16:	0e 94 f5 02 	call	0x5ea	; 0x5ea <pwm>
     e1a:	2f ef       	ldi	r18, 0xFF	; 255
     e1c:	83 ed       	ldi	r24, 0xD3	; 211
     e1e:	90 e3       	ldi	r25, 0x30	; 48
     e20:	21 50       	subi	r18, 0x01	; 1
     e22:	80 40       	sbci	r24, 0x00	; 0
     e24:	90 40       	sbci	r25, 0x00	; 0
     e26:	e1 f7       	brne	.-8      	; 0xe20 <__stack+0x521>
     e28:	00 c0       	rjmp	.+0      	; 0xe2a <__stack+0x52b>
     e2a:	00 00       	nop
					_delay_ms(1000);
					pwm(0,0);
     e2c:	60 e0       	ldi	r22, 0x00	; 0
     e2e:	70 e0       	ldi	r23, 0x00	; 0
     e30:	80 e0       	ldi	r24, 0x00	; 0
     e32:	90 e0       	ldi	r25, 0x00	; 0
     e34:	0e 94 f5 02 	call	0x5ea	; 0x5ea <pwm>
					pwm(1,0);
     e38:	60 e0       	ldi	r22, 0x00	; 0
     e3a:	70 e0       	ldi	r23, 0x00	; 0
     e3c:	81 e0       	ldi	r24, 0x01	; 1
     e3e:	90 e0       	ldi	r25, 0x00	; 0
     e40:	0e 94 f5 02 	call	0x5ea	; 0x5ea <pwm>
					pwm(2,0);
     e44:	60 e0       	ldi	r22, 0x00	; 0
     e46:	70 e0       	ldi	r23, 0x00	; 0
     e48:	82 e0       	ldi	r24, 0x02	; 2
     e4a:	90 e0       	ldi	r25, 0x00	; 0
     e4c:	0e 94 f5 02 	call	0x5ea	; 0x5ea <pwm>
					main();
     e50:	0e 94 78 04 	call	0x8f0	; 0x8f0 <main>

00000e54 <__divmodhi4>:
     e54:	97 fb       	bst	r25, 7
     e56:	07 2e       	mov	r0, r23
     e58:	16 f4       	brtc	.+4      	; 0xe5e <__divmodhi4+0xa>
     e5a:	00 94       	com	r0
     e5c:	07 d0       	rcall	.+14     	; 0xe6c <__divmodhi4_neg1>
     e5e:	77 fd       	sbrc	r23, 7
     e60:	09 d0       	rcall	.+18     	; 0xe74 <__divmodhi4_neg2>
     e62:	0e 94 3e 07 	call	0xe7c	; 0xe7c <__udivmodhi4>
     e66:	07 fc       	sbrc	r0, 7
     e68:	05 d0       	rcall	.+10     	; 0xe74 <__divmodhi4_neg2>
     e6a:	3e f4       	brtc	.+14     	; 0xe7a <__divmodhi4_exit>

00000e6c <__divmodhi4_neg1>:
     e6c:	90 95       	com	r25
     e6e:	81 95       	neg	r24
     e70:	9f 4f       	sbci	r25, 0xFF	; 255
     e72:	08 95       	ret

00000e74 <__divmodhi4_neg2>:
     e74:	70 95       	com	r23
     e76:	61 95       	neg	r22
     e78:	7f 4f       	sbci	r23, 0xFF	; 255

00000e7a <__divmodhi4_exit>:
     e7a:	08 95       	ret

00000e7c <__udivmodhi4>:
     e7c:	aa 1b       	sub	r26, r26
     e7e:	bb 1b       	sub	r27, r27
     e80:	51 e1       	ldi	r21, 0x11	; 17
     e82:	07 c0       	rjmp	.+14     	; 0xe92 <__udivmodhi4_ep>

00000e84 <__udivmodhi4_loop>:
     e84:	aa 1f       	adc	r26, r26
     e86:	bb 1f       	adc	r27, r27
     e88:	a6 17       	cp	r26, r22
     e8a:	b7 07       	cpc	r27, r23
     e8c:	10 f0       	brcs	.+4      	; 0xe92 <__udivmodhi4_ep>
     e8e:	a6 1b       	sub	r26, r22
     e90:	b7 0b       	sbc	r27, r23

00000e92 <__udivmodhi4_ep>:
     e92:	88 1f       	adc	r24, r24
     e94:	99 1f       	adc	r25, r25
     e96:	5a 95       	dec	r21
     e98:	a9 f7       	brne	.-22     	; 0xe84 <__udivmodhi4_loop>
     e9a:	80 95       	com	r24
     e9c:	90 95       	com	r25
     e9e:	bc 01       	movw	r22, r24
     ea0:	cd 01       	movw	r24, r26
     ea2:	08 95       	ret

00000ea4 <strtol>:
     ea4:	a0 e0       	ldi	r26, 0x00	; 0
     ea6:	b0 e0       	ldi	r27, 0x00	; 0
     ea8:	e8 e5       	ldi	r30, 0x58	; 88
     eaa:	f7 e0       	ldi	r31, 0x07	; 7
     eac:	0c 94 e7 08 	jmp	0x11ce	; 0x11ce <__prologue_saves__+0x2>
     eb0:	5c 01       	movw	r10, r24
     eb2:	6b 01       	movw	r12, r22
     eb4:	7a 01       	movw	r14, r20
     eb6:	61 15       	cp	r22, r1
     eb8:	71 05       	cpc	r23, r1
     eba:	19 f0       	breq	.+6      	; 0xec2 <strtol+0x1e>
     ebc:	fb 01       	movw	r30, r22
     ebe:	91 83       	std	Z+1, r25	; 0x01
     ec0:	80 83       	st	Z, r24
     ec2:	e1 14       	cp	r14, r1
     ec4:	f1 04       	cpc	r15, r1
     ec6:	29 f0       	breq	.+10     	; 0xed2 <strtol+0x2e>
     ec8:	c7 01       	movw	r24, r14
     eca:	02 97       	sbiw	r24, 0x02	; 2
     ecc:	83 97       	sbiw	r24, 0x23	; 35
     ece:	08 f0       	brcs	.+2      	; 0xed2 <strtol+0x2e>
     ed0:	e5 c0       	rjmp	.+458    	; 0x109c <strtol+0x1f8>
     ed2:	e5 01       	movw	r28, r10
     ed4:	21 96       	adiw	r28, 0x01	; 1
     ed6:	f5 01       	movw	r30, r10
     ed8:	10 81       	ld	r17, Z
     eda:	81 2f       	mov	r24, r17
     edc:	90 e0       	ldi	r25, 0x00	; 0
     ede:	0e 94 68 08 	call	0x10d0	; 0x10d0 <isspace>
     ee2:	89 2b       	or	r24, r25
     ee4:	11 f0       	breq	.+4      	; 0xeea <strtol+0x46>
     ee6:	5e 01       	movw	r10, r28
     ee8:	f4 cf       	rjmp	.-24     	; 0xed2 <strtol+0x2e>
     eea:	1d 32       	cpi	r17, 0x2D	; 45
     eec:	29 f4       	brne	.+10     	; 0xef8 <strtol+0x54>
     eee:	21 96       	adiw	r28, 0x01	; 1
     ef0:	f5 01       	movw	r30, r10
     ef2:	11 81       	ldd	r17, Z+1	; 0x01
     ef4:	01 e0       	ldi	r16, 0x01	; 1
     ef6:	07 c0       	rjmp	.+14     	; 0xf06 <strtol+0x62>
     ef8:	1b 32       	cpi	r17, 0x2B	; 43
     efa:	21 f4       	brne	.+8      	; 0xf04 <strtol+0x60>
     efc:	e5 01       	movw	r28, r10
     efe:	22 96       	adiw	r28, 0x02	; 2
     f00:	f5 01       	movw	r30, r10
     f02:	11 81       	ldd	r17, Z+1	; 0x01
     f04:	00 e0       	ldi	r16, 0x00	; 0
     f06:	e1 14       	cp	r14, r1
     f08:	f1 04       	cpc	r15, r1
     f0a:	09 f1       	breq	.+66     	; 0xf4e <strtol+0xaa>
     f0c:	f0 e1       	ldi	r31, 0x10	; 16
     f0e:	ef 16       	cp	r14, r31
     f10:	f1 04       	cpc	r15, r1
     f12:	29 f4       	brne	.+10     	; 0xf1e <strtol+0x7a>
     f14:	3f c0       	rjmp	.+126    	; 0xf94 <strtol+0xf0>
     f16:	10 e3       	ldi	r17, 0x30	; 48
     f18:	e1 14       	cp	r14, r1
     f1a:	f1 04       	cpc	r15, r1
     f1c:	21 f1       	breq	.+72     	; 0xf66 <strtol+0xc2>
     f1e:	28 e0       	ldi	r18, 0x08	; 8
     f20:	e2 16       	cp	r14, r18
     f22:	f1 04       	cpc	r15, r1
     f24:	01 f1       	breq	.+64     	; 0xf66 <strtol+0xc2>
     f26:	54 f4       	brge	.+20     	; 0xf3c <strtol+0x98>
     f28:	e2 e0       	ldi	r30, 0x02	; 2
     f2a:	ee 16       	cp	r14, r30
     f2c:	f1 04       	cpc	r15, r1
     f2e:	21 f5       	brne	.+72     	; 0xf78 <strtol+0xd4>
     f30:	81 2c       	mov	r8, r1
     f32:	91 2c       	mov	r9, r1
     f34:	a1 2c       	mov	r10, r1
     f36:	b0 e4       	ldi	r27, 0x40	; 64
     f38:	bb 2e       	mov	r11, r27
     f3a:	3e c0       	rjmp	.+124    	; 0xfb8 <strtol+0x114>
     f3c:	fa e0       	ldi	r31, 0x0A	; 10
     f3e:	ef 16       	cp	r14, r31
     f40:	f1 04       	cpc	r15, r1
     f42:	39 f0       	breq	.+14     	; 0xf52 <strtol+0xae>
     f44:	20 e1       	ldi	r18, 0x10	; 16
     f46:	e2 16       	cp	r14, r18
     f48:	f1 04       	cpc	r15, r1
     f4a:	b1 f4       	brne	.+44     	; 0xf78 <strtol+0xd4>
     f4c:	30 c0       	rjmp	.+96     	; 0xfae <strtol+0x10a>
     f4e:	10 33       	cpi	r17, 0x30	; 48
     f50:	19 f1       	breq	.+70     	; 0xf98 <strtol+0xf4>
     f52:	fa e0       	ldi	r31, 0x0A	; 10
     f54:	ef 2e       	mov	r14, r31
     f56:	f1 2c       	mov	r15, r1
     f58:	ac ec       	ldi	r26, 0xCC	; 204
     f5a:	8a 2e       	mov	r8, r26
     f5c:	98 2c       	mov	r9, r8
     f5e:	a8 2c       	mov	r10, r8
     f60:	ac e0       	ldi	r26, 0x0C	; 12
     f62:	ba 2e       	mov	r11, r26
     f64:	29 c0       	rjmp	.+82     	; 0xfb8 <strtol+0x114>
     f66:	78 e0       	ldi	r23, 0x08	; 8
     f68:	e7 2e       	mov	r14, r23
     f6a:	f1 2c       	mov	r15, r1
     f6c:	81 2c       	mov	r8, r1
     f6e:	91 2c       	mov	r9, r1
     f70:	a1 2c       	mov	r10, r1
     f72:	e0 e1       	ldi	r30, 0x10	; 16
     f74:	be 2e       	mov	r11, r30
     f76:	20 c0       	rjmp	.+64     	; 0xfb8 <strtol+0x114>
     f78:	60 e0       	ldi	r22, 0x00	; 0
     f7a:	70 e0       	ldi	r23, 0x00	; 0
     f7c:	80 e0       	ldi	r24, 0x00	; 0
     f7e:	90 e8       	ldi	r25, 0x80	; 128
     f80:	97 01       	movw	r18, r14
     f82:	0f 2c       	mov	r0, r15
     f84:	00 0c       	add	r0, r0
     f86:	44 0b       	sbc	r20, r20
     f88:	55 0b       	sbc	r21, r21
     f8a:	0e 94 b9 08 	call	0x1172	; 0x1172 <__udivmodsi4>
     f8e:	49 01       	movw	r8, r18
     f90:	5a 01       	movw	r10, r20
     f92:	12 c0       	rjmp	.+36     	; 0xfb8 <strtol+0x114>
     f94:	10 33       	cpi	r17, 0x30	; 48
     f96:	59 f4       	brne	.+22     	; 0xfae <strtol+0x10a>
     f98:	88 81       	ld	r24, Y
     f9a:	8f 7d       	andi	r24, 0xDF	; 223
     f9c:	88 35       	cpi	r24, 0x58	; 88
     f9e:	09 f0       	breq	.+2      	; 0xfa2 <strtol+0xfe>
     fa0:	ba cf       	rjmp	.-140    	; 0xf16 <strtol+0x72>
     fa2:	19 81       	ldd	r17, Y+1	; 0x01
     fa4:	22 96       	adiw	r28, 0x02	; 2
     fa6:	02 60       	ori	r16, 0x02	; 2
     fa8:	80 e1       	ldi	r24, 0x10	; 16
     faa:	e8 2e       	mov	r14, r24
     fac:	f1 2c       	mov	r15, r1
     fae:	81 2c       	mov	r8, r1
     fb0:	91 2c       	mov	r9, r1
     fb2:	a1 2c       	mov	r10, r1
     fb4:	68 e0       	ldi	r22, 0x08	; 8
     fb6:	b6 2e       	mov	r11, r22
     fb8:	40 e0       	ldi	r20, 0x00	; 0
     fba:	60 e0       	ldi	r22, 0x00	; 0
     fbc:	70 e0       	ldi	r23, 0x00	; 0
     fbe:	cb 01       	movw	r24, r22
     fc0:	27 01       	movw	r4, r14
     fc2:	0f 2c       	mov	r0, r15
     fc4:	00 0c       	add	r0, r0
     fc6:	66 08       	sbc	r6, r6
     fc8:	77 08       	sbc	r7, r7
     fca:	fe 01       	movw	r30, r28
     fcc:	50 ed       	ldi	r21, 0xD0	; 208
     fce:	35 2e       	mov	r3, r21
     fd0:	31 0e       	add	r3, r17
     fd2:	29 e0       	ldi	r18, 0x09	; 9
     fd4:	23 15       	cp	r18, r3
     fd6:	70 f4       	brcc	.+28     	; 0xff4 <strtol+0x150>
     fd8:	2f eb       	ldi	r18, 0xBF	; 191
     fda:	21 0f       	add	r18, r17
     fdc:	2a 31       	cpi	r18, 0x1A	; 26
     fde:	18 f4       	brcc	.+6      	; 0xfe6 <strtol+0x142>
     fe0:	39 ec       	ldi	r19, 0xC9	; 201
     fe2:	33 2e       	mov	r3, r19
     fe4:	06 c0       	rjmp	.+12     	; 0xff2 <strtol+0x14e>
     fe6:	2f e9       	ldi	r18, 0x9F	; 159
     fe8:	21 0f       	add	r18, r17
     fea:	2a 31       	cpi	r18, 0x1A	; 26
     fec:	18 f5       	brcc	.+70     	; 0x1034 <strtol+0x190>
     fee:	29 ea       	ldi	r18, 0xA9	; 169
     ff0:	32 2e       	mov	r3, r18
     ff2:	31 0e       	add	r3, r17
     ff4:	23 2d       	mov	r18, r3
     ff6:	30 e0       	ldi	r19, 0x00	; 0
     ff8:	2e 15       	cp	r18, r14
     ffa:	3f 05       	cpc	r19, r15
     ffc:	dc f4       	brge	.+54     	; 0x1034 <strtol+0x190>
     ffe:	47 fd       	sbrc	r20, 7
    1000:	16 c0       	rjmp	.+44     	; 0x102e <strtol+0x18a>
    1002:	86 16       	cp	r8, r22
    1004:	97 06       	cpc	r9, r23
    1006:	a8 06       	cpc	r10, r24
    1008:	b9 06       	cpc	r11, r25
    100a:	70 f0       	brcs	.+28     	; 0x1028 <strtol+0x184>
    100c:	a3 01       	movw	r20, r6
    100e:	92 01       	movw	r18, r4
    1010:	0e 94 a9 08 	call	0x1152	; 0x1152 <__mulsi3>
    1014:	63 0d       	add	r22, r3
    1016:	71 1d       	adc	r23, r1
    1018:	81 1d       	adc	r24, r1
    101a:	91 1d       	adc	r25, r1
    101c:	61 30       	cpi	r22, 0x01	; 1
    101e:	71 05       	cpc	r23, r1
    1020:	81 05       	cpc	r24, r1
    1022:	20 e8       	ldi	r18, 0x80	; 128
    1024:	92 07       	cpc	r25, r18
    1026:	10 f0       	brcs	.+4      	; 0x102c <strtol+0x188>
    1028:	4f ef       	ldi	r20, 0xFF	; 255
    102a:	01 c0       	rjmp	.+2      	; 0x102e <strtol+0x18a>
    102c:	41 e0       	ldi	r20, 0x01	; 1
    102e:	21 96       	adiw	r28, 0x01	; 1
    1030:	10 81       	ld	r17, Z
    1032:	cb cf       	rjmp	.-106    	; 0xfca <strtol+0x126>
    1034:	20 2f       	mov	r18, r16
    1036:	21 70       	andi	r18, 0x01	; 1
    1038:	c1 14       	cp	r12, r1
    103a:	d1 04       	cpc	r13, r1
    103c:	71 f0       	breq	.+28     	; 0x105a <strtol+0x1b6>
    103e:	44 23       	and	r20, r20
    1040:	29 f0       	breq	.+10     	; 0x104c <strtol+0x1a8>
    1042:	21 97       	sbiw	r28, 0x01	; 1
    1044:	f6 01       	movw	r30, r12
    1046:	d1 83       	std	Z+1, r29	; 0x01
    1048:	c0 83       	st	Z, r28
    104a:	07 c0       	rjmp	.+14     	; 0x105a <strtol+0x1b6>
    104c:	01 ff       	sbrs	r16, 1
    104e:	19 c0       	rjmp	.+50     	; 0x1082 <strtol+0x1de>
    1050:	22 97       	sbiw	r28, 0x02	; 2
    1052:	f6 01       	movw	r30, r12
    1054:	d1 83       	std	Z+1, r29	; 0x01
    1056:	c0 83       	st	Z, r28
    1058:	14 c0       	rjmp	.+40     	; 0x1082 <strtol+0x1de>
    105a:	47 ff       	sbrs	r20, 7
    105c:	12 c0       	rjmp	.+36     	; 0x1082 <strtol+0x1de>
    105e:	22 23       	and	r18, r18
    1060:	29 f0       	breq	.+10     	; 0x106c <strtol+0x1c8>
    1062:	60 e0       	ldi	r22, 0x00	; 0
    1064:	70 e0       	ldi	r23, 0x00	; 0
    1066:	80 e0       	ldi	r24, 0x00	; 0
    1068:	90 e8       	ldi	r25, 0x80	; 128
    106a:	04 c0       	rjmp	.+8      	; 0x1074 <strtol+0x1d0>
    106c:	6f ef       	ldi	r22, 0xFF	; 255
    106e:	7f ef       	ldi	r23, 0xFF	; 255
    1070:	8f ef       	ldi	r24, 0xFF	; 255
    1072:	9f e7       	ldi	r25, 0x7F	; 127
    1074:	22 e2       	ldi	r18, 0x22	; 34
    1076:	30 e0       	ldi	r19, 0x00	; 0
    1078:	30 93 ea 01 	sts	0x01EA, r19	; 0x8001ea <errno+0x1>
    107c:	20 93 e9 01 	sts	0x01E9, r18	; 0x8001e9 <errno>
    1080:	09 c0       	rjmp	.+18     	; 0x1094 <strtol+0x1f0>
    1082:	22 23       	and	r18, r18
    1084:	81 f0       	breq	.+32     	; 0x10a6 <strtol+0x202>
    1086:	90 95       	com	r25
    1088:	80 95       	com	r24
    108a:	70 95       	com	r23
    108c:	61 95       	neg	r22
    108e:	7f 4f       	sbci	r23, 0xFF	; 255
    1090:	8f 4f       	sbci	r24, 0xFF	; 255
    1092:	9f 4f       	sbci	r25, 0xFF	; 255
    1094:	46 2f       	mov	r20, r22
    1096:	37 2f       	mov	r19, r23
    1098:	28 2f       	mov	r18, r24
    109a:	12 c0       	rjmp	.+36     	; 0x10c0 <strtol+0x21c>
    109c:	40 e0       	ldi	r20, 0x00	; 0
    109e:	30 e0       	ldi	r19, 0x00	; 0
    10a0:	20 e0       	ldi	r18, 0x00	; 0
    10a2:	90 e0       	ldi	r25, 0x00	; 0
    10a4:	0d c0       	rjmp	.+26     	; 0x10c0 <strtol+0x21c>
    10a6:	97 ff       	sbrs	r25, 7
    10a8:	f5 cf       	rjmp	.-22     	; 0x1094 <strtol+0x1f0>
    10aa:	82 e2       	ldi	r24, 0x22	; 34
    10ac:	90 e0       	ldi	r25, 0x00	; 0
    10ae:	90 93 ea 01 	sts	0x01EA, r25	; 0x8001ea <errno+0x1>
    10b2:	80 93 e9 01 	sts	0x01E9, r24	; 0x8001e9 <errno>
    10b6:	6f ef       	ldi	r22, 0xFF	; 255
    10b8:	7f ef       	ldi	r23, 0xFF	; 255
    10ba:	8f ef       	ldi	r24, 0xFF	; 255
    10bc:	9f e7       	ldi	r25, 0x7F	; 127
    10be:	ea cf       	rjmp	.-44     	; 0x1094 <strtol+0x1f0>
    10c0:	64 2f       	mov	r22, r20
    10c2:	73 2f       	mov	r23, r19
    10c4:	82 2f       	mov	r24, r18
    10c6:	cd b7       	in	r28, 0x3d	; 61
    10c8:	de b7       	in	r29, 0x3e	; 62
    10ca:	e1 e1       	ldi	r30, 0x11	; 17
    10cc:	0c 94 03 09 	jmp	0x1206	; 0x1206 <__epilogue_restores__+0x2>

000010d0 <isspace>:
    10d0:	91 11       	cpse	r25, r1
    10d2:	0c 94 96 08 	jmp	0x112c	; 0x112c <__ctype_isfalse>
    10d6:	80 32       	cpi	r24, 0x20	; 32
    10d8:	19 f0       	breq	.+6      	; 0x10e0 <isspace+0x10>
    10da:	89 50       	subi	r24, 0x09	; 9
    10dc:	85 50       	subi	r24, 0x05	; 5
    10de:	c8 f7       	brcc	.-14     	; 0x10d2 <isspace+0x2>
    10e0:	08 95       	ret

000010e2 <utoa>:
    10e2:	45 32       	cpi	r20, 0x25	; 37
    10e4:	51 05       	cpc	r21, r1
    10e6:	20 f4       	brcc	.+8      	; 0x10f0 <utoa+0xe>
    10e8:	42 30       	cpi	r20, 0x02	; 2
    10ea:	10 f0       	brcs	.+4      	; 0x10f0 <utoa+0xe>
    10ec:	0c 94 7c 08 	jmp	0x10f8	; 0x10f8 <__utoa_ncheck>
    10f0:	fb 01       	movw	r30, r22
    10f2:	10 82       	st	Z, r1
    10f4:	cb 01       	movw	r24, r22
    10f6:	08 95       	ret

000010f8 <__utoa_ncheck>:
    10f8:	bb 27       	eor	r27, r27

000010fa <__utoa_common>:
    10fa:	fb 01       	movw	r30, r22
    10fc:	55 27       	eor	r21, r21
    10fe:	aa 27       	eor	r26, r26
    1100:	88 0f       	add	r24, r24
    1102:	99 1f       	adc	r25, r25
    1104:	aa 1f       	adc	r26, r26
    1106:	a4 17       	cp	r26, r20
    1108:	10 f0       	brcs	.+4      	; 0x110e <__utoa_common+0x14>
    110a:	a4 1b       	sub	r26, r20
    110c:	83 95       	inc	r24
    110e:	50 51       	subi	r21, 0x10	; 16
    1110:	b9 f7       	brne	.-18     	; 0x1100 <__utoa_common+0x6>
    1112:	a0 5d       	subi	r26, 0xD0	; 208
    1114:	aa 33       	cpi	r26, 0x3A	; 58
    1116:	08 f0       	brcs	.+2      	; 0x111a <__utoa_common+0x20>
    1118:	a9 5d       	subi	r26, 0xD9	; 217
    111a:	a1 93       	st	Z+, r26
    111c:	00 97       	sbiw	r24, 0x00	; 0
    111e:	79 f7       	brne	.-34     	; 0x10fe <__utoa_common+0x4>
    1120:	b1 11       	cpse	r27, r1
    1122:	b1 93       	st	Z+, r27
    1124:	11 92       	st	Z+, r1
    1126:	cb 01       	movw	r24, r22
    1128:	0c 94 99 08 	jmp	0x1132	; 0x1132 <strrev>

0000112c <__ctype_isfalse>:
    112c:	99 27       	eor	r25, r25
    112e:	88 27       	eor	r24, r24

00001130 <__ctype_istrue>:
    1130:	08 95       	ret

00001132 <strrev>:
    1132:	dc 01       	movw	r26, r24
    1134:	fc 01       	movw	r30, r24
    1136:	67 2f       	mov	r22, r23
    1138:	71 91       	ld	r23, Z+
    113a:	77 23       	and	r23, r23
    113c:	e1 f7       	brne	.-8      	; 0x1136 <strrev+0x4>
    113e:	32 97       	sbiw	r30, 0x02	; 2
    1140:	04 c0       	rjmp	.+8      	; 0x114a <strrev+0x18>
    1142:	7c 91       	ld	r23, X
    1144:	6d 93       	st	X+, r22
    1146:	70 83       	st	Z, r23
    1148:	62 91       	ld	r22, -Z
    114a:	ae 17       	cp	r26, r30
    114c:	bf 07       	cpc	r27, r31
    114e:	c8 f3       	brcs	.-14     	; 0x1142 <strrev+0x10>
    1150:	08 95       	ret

00001152 <__mulsi3>:
    1152:	db 01       	movw	r26, r22
    1154:	8f 93       	push	r24
    1156:	9f 93       	push	r25
    1158:	0e 94 db 08 	call	0x11b6	; 0x11b6 <__muluhisi3>
    115c:	bf 91       	pop	r27
    115e:	af 91       	pop	r26
    1160:	a2 9f       	mul	r26, r18
    1162:	80 0d       	add	r24, r0
    1164:	91 1d       	adc	r25, r1
    1166:	a3 9f       	mul	r26, r19
    1168:	90 0d       	add	r25, r0
    116a:	b2 9f       	mul	r27, r18
    116c:	90 0d       	add	r25, r0
    116e:	11 24       	eor	r1, r1
    1170:	08 95       	ret

00001172 <__udivmodsi4>:
    1172:	a1 e2       	ldi	r26, 0x21	; 33
    1174:	1a 2e       	mov	r1, r26
    1176:	aa 1b       	sub	r26, r26
    1178:	bb 1b       	sub	r27, r27
    117a:	fd 01       	movw	r30, r26
    117c:	0d c0       	rjmp	.+26     	; 0x1198 <__udivmodsi4_ep>

0000117e <__udivmodsi4_loop>:
    117e:	aa 1f       	adc	r26, r26
    1180:	bb 1f       	adc	r27, r27
    1182:	ee 1f       	adc	r30, r30
    1184:	ff 1f       	adc	r31, r31
    1186:	a2 17       	cp	r26, r18
    1188:	b3 07       	cpc	r27, r19
    118a:	e4 07       	cpc	r30, r20
    118c:	f5 07       	cpc	r31, r21
    118e:	20 f0       	brcs	.+8      	; 0x1198 <__udivmodsi4_ep>
    1190:	a2 1b       	sub	r26, r18
    1192:	b3 0b       	sbc	r27, r19
    1194:	e4 0b       	sbc	r30, r20
    1196:	f5 0b       	sbc	r31, r21

00001198 <__udivmodsi4_ep>:
    1198:	66 1f       	adc	r22, r22
    119a:	77 1f       	adc	r23, r23
    119c:	88 1f       	adc	r24, r24
    119e:	99 1f       	adc	r25, r25
    11a0:	1a 94       	dec	r1
    11a2:	69 f7       	brne	.-38     	; 0x117e <__udivmodsi4_loop>
    11a4:	60 95       	com	r22
    11a6:	70 95       	com	r23
    11a8:	80 95       	com	r24
    11aa:	90 95       	com	r25
    11ac:	9b 01       	movw	r18, r22
    11ae:	ac 01       	movw	r20, r24
    11b0:	bd 01       	movw	r22, r26
    11b2:	cf 01       	movw	r24, r30
    11b4:	08 95       	ret

000011b6 <__muluhisi3>:
    11b6:	0e 94 1d 09 	call	0x123a	; 0x123a <__umulhisi3>
    11ba:	a5 9f       	mul	r26, r21
    11bc:	90 0d       	add	r25, r0
    11be:	b4 9f       	mul	r27, r20
    11c0:	90 0d       	add	r25, r0
    11c2:	a4 9f       	mul	r26, r20
    11c4:	80 0d       	add	r24, r0
    11c6:	91 1d       	adc	r25, r1
    11c8:	11 24       	eor	r1, r1
    11ca:	08 95       	ret

000011cc <__prologue_saves__>:
    11cc:	2f 92       	push	r2
    11ce:	3f 92       	push	r3
    11d0:	4f 92       	push	r4
    11d2:	5f 92       	push	r5
    11d4:	6f 92       	push	r6
    11d6:	7f 92       	push	r7
    11d8:	8f 92       	push	r8
    11da:	9f 92       	push	r9
    11dc:	af 92       	push	r10
    11de:	bf 92       	push	r11
    11e0:	cf 92       	push	r12
    11e2:	df 92       	push	r13
    11e4:	ef 92       	push	r14
    11e6:	ff 92       	push	r15
    11e8:	0f 93       	push	r16
    11ea:	1f 93       	push	r17
    11ec:	cf 93       	push	r28
    11ee:	df 93       	push	r29
    11f0:	cd b7       	in	r28, 0x3d	; 61
    11f2:	de b7       	in	r29, 0x3e	; 62
    11f4:	ca 1b       	sub	r28, r26
    11f6:	db 0b       	sbc	r29, r27
    11f8:	0f b6       	in	r0, 0x3f	; 63
    11fa:	f8 94       	cli
    11fc:	de bf       	out	0x3e, r29	; 62
    11fe:	0f be       	out	0x3f, r0	; 63
    1200:	cd bf       	out	0x3d, r28	; 61
    1202:	09 94       	ijmp

00001204 <__epilogue_restores__>:
    1204:	2a 88       	ldd	r2, Y+18	; 0x12
    1206:	39 88       	ldd	r3, Y+17	; 0x11
    1208:	48 88       	ldd	r4, Y+16	; 0x10
    120a:	5f 84       	ldd	r5, Y+15	; 0x0f
    120c:	6e 84       	ldd	r6, Y+14	; 0x0e
    120e:	7d 84       	ldd	r7, Y+13	; 0x0d
    1210:	8c 84       	ldd	r8, Y+12	; 0x0c
    1212:	9b 84       	ldd	r9, Y+11	; 0x0b
    1214:	aa 84       	ldd	r10, Y+10	; 0x0a
    1216:	b9 84       	ldd	r11, Y+9	; 0x09
    1218:	c8 84       	ldd	r12, Y+8	; 0x08
    121a:	df 80       	ldd	r13, Y+7	; 0x07
    121c:	ee 80       	ldd	r14, Y+6	; 0x06
    121e:	fd 80       	ldd	r15, Y+5	; 0x05
    1220:	0c 81       	ldd	r16, Y+4	; 0x04
    1222:	1b 81       	ldd	r17, Y+3	; 0x03
    1224:	aa 81       	ldd	r26, Y+2	; 0x02
    1226:	b9 81       	ldd	r27, Y+1	; 0x01
    1228:	ce 0f       	add	r28, r30
    122a:	d1 1d       	adc	r29, r1
    122c:	0f b6       	in	r0, 0x3f	; 63
    122e:	f8 94       	cli
    1230:	de bf       	out	0x3e, r29	; 62
    1232:	0f be       	out	0x3f, r0	; 63
    1234:	cd bf       	out	0x3d, r28	; 61
    1236:	ed 01       	movw	r28, r26
    1238:	08 95       	ret

0000123a <__umulhisi3>:
    123a:	a2 9f       	mul	r26, r18
    123c:	b0 01       	movw	r22, r0
    123e:	b3 9f       	mul	r27, r19
    1240:	c0 01       	movw	r24, r0
    1242:	a3 9f       	mul	r26, r19
    1244:	70 0d       	add	r23, r0
    1246:	81 1d       	adc	r24, r1
    1248:	11 24       	eor	r1, r1
    124a:	91 1d       	adc	r25, r1
    124c:	b2 9f       	mul	r27, r18
    124e:	70 0d       	add	r23, r0
    1250:	81 1d       	adc	r24, r1
    1252:	11 24       	eor	r1, r1
    1254:	91 1d       	adc	r25, r1
    1256:	08 95       	ret

00001258 <_exit>:
    1258:	f8 94       	cli

0000125a <__stop_program>:
    125a:	ff cf       	rjmp	.-2      	; 0x125a <__stop_program>
